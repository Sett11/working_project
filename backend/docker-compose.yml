# ════════════════════════════════════════════════════════════════════════
# Docker Compose Configuration for AirCon Sales System
# Проект: Система автоматизации продаж кондиционеров
# Stack: React + TypeScript (Frontend), FastAPI (Backend), PostgreSQL (Database)
# ════════════════════════════════════════════════════════════════════════

services:
  # ═════════════════════════════════════════════════════════════════════
  # BACKEND SERVICE (FastAPI)
  # ═════════════════════════════════════════════════════════════════════
  backend:
    build:
      context: ..
      dockerfile: backend/Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_backend
    command: >
      sh -c "
        sh /app/backend/init.sh &&
        uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload --log-level info
      "
    volumes:
      - ../db:/app/db
      - ./api:/app/backend/api
      - ./utils:/app/backend/utils
      - ./commercial_offer_pdf:/app/backend/commercial_offer_pdf
      - ./logs:/app/backend/logs
      - ./init.sh:/app/backend/init.sh
      - ./main.py:/app/backend/main.py
      - ./.env:/app/backend/.env
      - seeder_flag:/app/.seeder_flag
    ports:
      - "${BACKEND_PORT}:8000"
    depends_on:
      - db
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_URL_SYNC=${DATABASE_URL_SYNC}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_EXPIRATION_HOURS=${JWT_EXPIRATION_HOURS}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - PYTHONPATH=/app
      - PYTHONIOENCODING=utf-8
      - LANG=C.UTF-8
      - LC_ALL=C.UTF-8
    restart: unless-stopped
    networks:
      - aircon_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ═════════════════════════════════════════════════════════════════════
  # FRONTEND SERVICE (React + Vite)
  # ═════════════════════════════════════════════════════════════════════
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_frontend
    command: npm run dev
    volumes:
      - ../frontend/src:/app/src
      - ../frontend/public:/app/public
      - ../frontend/index.html:/app/index.html
      - ../frontend/vite.config.ts:/app/vite.config.ts
      - ../frontend/tsconfig.json:/app/tsconfig.json
      - ../frontend/package.json:/app/package.json
    ports:
      - "5173:5173"
    depends_on:
      - backend
    environment:
      - VITE_API_BASE_URL=http://backend:8000
      - VITE_APP_NAME=AirCon Sales System
    restart: unless-stopped
    networks:
      - aircon_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ═════════════════════════════════════════════════════════════════════
  # DATABASE SERVICE (PostgreSQL)
  # ═════════════════════════════════════════════════════════════════════
  db:
    image: postgres:15-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_db
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ../db/init:/docker-entrypoint-initdb.d
      - ../db/postgresql.conf:/etc/postgresql/postgresql.conf
      - backups:/backups
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    restart: unless-stopped
    networks:
      - aircon_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

# ════════════════════════════════════════════════════════════════════════
# NETWORKS
# ════════════════════════════════════════════════════════════════════════
networks:
  aircon_network:
    driver: bridge

# ════════════════════════════════════════════════════════════════════════
# VOLUMES
# ════════════════════════════════════════════════════════════════════════
volumes:
  postgres_data:
  seeder_flag:
  backups:
