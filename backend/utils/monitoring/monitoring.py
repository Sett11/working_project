"""
–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import asyncio
import time
import re
import psutil
from typing import Dict, Any, Optional
from utils.mylogger import Logger

logger = Logger(name="monitoring", log_file="monitoring.log")

class ApplicationMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.last_alert_time = {}
        self.alert_cooldown = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –∞–ª–µ—Ä—Ç–∞–º–∏
        self.monitoring_active = False
        self._monitor_task = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if self.monitoring_active and self._monitor_task and not self._monitor_task.done():
            logger.warning("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞, –æ—Ç–º–µ–Ω—è–µ–º –µ—ë
        if self._monitor_task and not self._monitor_task.done():
            logger.info("–û—Ç–º–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            self._monitor_task.cancel()
            try:
                await asyncio.wait_for(self._monitor_task, timeout=5.0)
            except (asyncio.CancelledError, asyncio.TimeoutError):
                pass
            self._monitor_task = None
            
        self.monitoring_active = True
        logger.info("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self._monitor_task = asyncio.create_task(self._monitor_loop())
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring_active = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if self._monitor_task and not self._monitor_task.done():
            logger.info("–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            self._monitor_task.cancel()
            
            try:
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                await asyncio.wait_for(self._monitor_task, timeout=10.0)
                logger.info("–ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except asyncio.CancelledError:
                logger.info("–ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            except asyncio.TimeoutError:
                logger.warning("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            finally:
                self._monitor_task = None
        
        logger.info("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU)"""
        while self.monitoring_active:
            try:
                await self._check_system_health()
                await self._check_database_health()
                await self._check_connection_pool()
                await self._check_graceful_degradation()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (—É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏)
                await asyncio.sleep(600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 5 –º–∏–Ω—É—Ç)
                
            except asyncio.CancelledError:
                raise  # Re-raise CancelledError to allow proper task cancellation
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 30 —Å–µ–∫—É–Ω–¥)
    
    async def _check_system_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)"""
        try:
            # –í –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö Docker psutil.cpu_percent(interval=None) –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            cpu_percent = psutil.cpu_percent(interval=0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏
            if cpu_percent > 80:
                await self._send_alert("system", f"–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent}%", 
                                      alert_template="high_cpu")
            
            if memory.percent > 85:
                await self._send_alert("system", f"–í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent}%", 
                                      alert_template="high_memory")
            
            if disk.percent > 90:
                await self._send_alert("system", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏—Å–∫–∞: {disk.percent}%", 
                                      alert_template="high_disk")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
    
    async def _check_database_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–µ—Å—Å–∏–∏"""
        session = None
        try:
            from db.database import AsyncSessionLocal
            from sqlalchemy import text
            
            session = AsyncSessionLocal()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
            await asyncio.wait_for(session.execute(text("SELECT 1")), timeout=5.0)
                
        except asyncio.TimeoutError:
            await self._send_alert("database", "–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (5 —Å–µ–∫—É–Ω–¥)", 
                                  alert_template="db_timeout")
        except Exception as e:
            await self._send_alert("database", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}", 
                                  alert_template="db_connection_error")
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            if session:
                try:
                    await session.close()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –ë–î: {e}")
    
    async def _check_connection_pool(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            from db.database import engine
            pool = engine.pool
            
            pool_size = pool.size()
            checked_out = pool.checkedout()
            overflow = pool.overflow()
            utilization = (checked_out / pool_size * 100) if pool_size > 0 else 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
            if utilization > 90:
                await self._send_alert("pool", f"–í—ã—Å–æ–∫–∞—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞: {utilization:.1f}%", 
                                      alert_template="high_pool_utilization")
            
            if overflow > 5:
                await self._send_alert("pool", f"–ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–ª–∞: {overflow} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π", 
                                      alert_template="pool_overflow")
            
            if checked_out == pool_size:
                await self._send_alert("pool", "–í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ø—É–ª–µ –∑–∞–Ω—è—Ç—ã!", 
                                      alert_template="pool_exhausted")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
    
    async def _check_graceful_degradation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è graceful degradation"""
        try:
            from utils.graceful_degradation import graceful_manager
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å graceful degradation
            gd_status = graceful_manager.get_degradation_status()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–µ–∂–∏–º–µ degradation
            if gd_status.get('degradation_mode', False):
                degradation_duration = gd_status.get('degradation_duration', 0)
                recovery_attempts = gd_status.get('recovery_attempts', 0)
                max_attempts = gd_status.get('max_recovery_attempts', 5)
                
                # –ê–ª–µ—Ä—Ç –µ—Å–ª–∏ degradation –¥–ª–∏—Ç—Å—è –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç
                if degradation_duration > 600:  # 10 –º–∏–Ω—É—Ç
                    await self._send_alert("graceful_degradation", 
                        f"–î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º graceful degradation: {degradation_duration:.0f} —Å–µ–∫—É–Ω–¥",
                        alert_template="long_degradation")
                
                # –ê–ª–µ—Ä—Ç –µ—Å–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                if recovery_attempts >= max_attempts:
                    await self._send_alert("graceful_degradation", 
                        f"–ò—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {recovery_attempts}/{max_attempts}",
                        alert_template="recovery_exhausted")
                
                # –ê–ª–µ—Ä—Ç –µ—Å–ª–∏ degradation –¥–ª–∏—Ç—Å—è –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç
                if degradation_duration > 1800:  # 30 –º–∏–Ω—É—Ç
                    await self._send_alert("graceful_degradation", 
                        f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º graceful degradation: {degradation_duration:.0f} —Å–µ–∫—É–Ω–¥",
                        alert_template="critical_degradation")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ graceful degradation: {e}")
    
    def _normalize_alert_key(self, message: str) -> str:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–ª—é—á–∞.
        –£–¥–∞–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏: —á–∏—Å–ª–∞, –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏.
        
        –ü—Ä–∏–º–µ—Ä—ã:
        - "–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: 85.3%" -> "–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: %"
        - "–ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–ª–∞: 7 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π" -> "–ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–ª–∞: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"
        - "–î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º graceful degradation: 650 —Å–µ–∫—É–Ω–¥" -> "–î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º graceful degradation: —Å–µ–∫—É–Ω–¥"
        """
        # –£–¥–∞–ª—è–µ–º —á–∏—Å–ª–∞ (—Ü–µ–ª—ã–µ –∏ –¥—Ä–æ–±–Ω—ã–µ) –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        normalized = re.sub(r'\d+\.?\d*%?', '', message)
        # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        normalized = re.sub(r'\s+', ' ', normalized)
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
        normalized = normalized.strip()
        return normalized
    
    async def _send_alert(self, alert_type: str, message: str, alert_template: Optional[str] = None):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞.
        
        Args:
            alert_type: –¢–∏–ø –∞–ª–µ—Ä—Ç–∞ (system, database, pool, graceful_degradation)
            message: –ü–æ–ª–Ω–æ–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            alert_template: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è –∫–ª—é—á–∞ cooldown.
                          –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É—Ç–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ message.
        """
        current_time = time.time()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–ª—é—á–∞
        template = alert_template if alert_template else self._normalize_alert_key(message)
        alert_key = f"{alert_type}_{template}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã –Ω–µ–¥–∞–≤–Ω–æ —Ç–∞–∫–æ–π –∂–µ –∞–ª–µ—Ä—Ç
        if alert_key in self.last_alert_time:
            if current_time - self.last_alert_time[alert_key] < self.alert_cooldown:
                # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –ø—Ä–æ–ø—É—Å–∫–∞ –∞–ª–µ—Ä—Ç–∞ (debug level)
                logger.debug(f"–ê–ª–µ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω (cooldown): [{alert_type.upper()}] {message}")
                return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç —Å –ø–æ–ª–Ω—ã–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        logger.warning(f"üö® –ê–õ–ï–†–¢ [{alert_type.upper()}]: {message}")
        self.last_alert_time[alert_key] = current_time
    
    async def get_health_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            cpu_percent = psutil.cpu_percent(interval=0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ graceful degradation
            graceful_status = {}
            try:
                from utils.graceful_degradation import graceful_manager
                graceful_status = graceful_manager.get_degradation_status()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ graceful degradation: {e}")
                graceful_status = {"error": str(e)}
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–ª–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            pool_stats = {}
            try:
                from db.database import engine
                pool = engine.pool
                pool_stats = {
                    "size": pool.size(),
                    "checked_in": pool.checkedin(),
                    "checked_out": pool.checkedout(),
                    "overflow": pool.overflow(),
                    "utilization_percent": round((pool.checkedout() / pool.size()) * 100, 2) if pool.size() > 0 else 0
                }
            except Exception as e:
                pool_stats = {"error": str(e)}
            
            # –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            db_status = "healthy"
            session = None
            try:
                from db.database import AsyncSessionLocal
                from sqlalchemy import text
                session = AsyncSessionLocal()
                await asyncio.wait_for(session.execute(text("SELECT 1")), timeout=5.0)
            except asyncio.TimeoutError:
                db_status = "timeout: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            except Exception as e:
                db_status = f"error: {str(e)}"
            finally:
                if session:
                    try:
                        await session.close()
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –ë–î –≤ get_health_status: {e}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (critical > warning > healthy)
            overall_status = "healthy"
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
            if (cpu_percent > 95 or memory.percent > 95 or 
                disk.percent > 95 or db_status != "healthy" or
                pool_stats.get("utilization_percent", 0) > 95):
                overall_status = "critical"
            # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ critical)
            elif (cpu_percent > 80 or memory.percent > 85 or 
                  disk.percent > 90 or db_status != "healthy" or
                  pool_stats.get("utilization_percent", 0) > 90):
                overall_status = "warning"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            cpu_count = psutil.cpu_count()
            disk_free_gb = round(disk.free / 1024 / 1024 / 1024, 2)
            
            # –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            network_connections = len(psutil.net_connections())
            # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            # 0-50 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π = 0-50%, 50-200 = 50-80%, 200+ = 80-100%
            if network_connections <= 50:
                network_usage_percent = network_connections * 1.0  # 0-50%
            elif network_connections <= 200:
                network_usage_percent = 50 + (network_connections - 50) * 0.2  # 50-80%
            else:
                network_usage_percent = min(80 + (network_connections - 200) * 0.1, 100)  # 80-100%
            
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
            cpu_temperature = 0
            cpu_temperature_max = 0
            try:
                if hasattr(psutil, 'sensors_temperatures'):
                    temps = psutil.sensors_temperatures()
                    if temps:
                        for name, entries in temps.items():
                            for entry in entries:
                                if 'cpu' in name.lower() or 'core' in name.lower():
                                    cpu_temperature = max(cpu_temperature, entry.current or 0)
                                    cpu_temperature_max = max(cpu_temperature_max, entry.high or 0)
                
                # –ï—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º—É–ª—è—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∑–∫–∏ CPU
                if cpu_temperature == 0:
                    # –≠–º—É–ª—è—Ü–∏—è: –±–∞–∑–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 30¬∞C + –∑–∞–≥—Ä—É–∑–∫–∞ CPU * 0.5
                    cpu_temperature = 30 + cpu_percent * 0.5
                    cpu_temperature_max = 80  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                    
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É CPU: {e}")
                # Fallback: —ç–º—É–ª—è—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∑–∫–∏ CPU
                cpu_temperature = 30 + cpu_percent * 0.5
                cpu_temperature_max = 80
            
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
            uptime_seconds = time.time() - psutil.boot_time()
            uptime_hours = uptime_seconds / 3600
            uptime_days = uptime_hours / 24
            
            return {
                "timestamp": time.time(),
                "overall_status": overall_status,
                "system": {
                    "cpu_percent": cpu_percent,
                    "cpu_count": cpu_count,
                    "memory_percent": memory.percent,
                    "memory_available_mb": round(memory.available / 1024 / 1024, 2),
                    "disk_usage_percent": disk.percent,
                    "disk_free_gb": disk_free_gb,
                    "network_usage_percent": network_usage_percent,
                    "network_connections": network_connections,
                    "cpu_temperature": cpu_temperature,
                    "cpu_temperature_max": cpu_temperature_max,
                    "uptime_hours": uptime_hours,
                    "uptime_days": uptime_days
                },
                "database_status": db_status,
                "pool_stats": pool_stats,
                "graceful_degradation": graceful_status
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return {
                "timestamp": time.time(),
                "overall_status": "error",
                "error": str(e)
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
monitor = ApplicationMonitor()
