"""
–ú–æ–¥—É–ª—å Graceful Degradation –¥–ª—è —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
1. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ fallback
2. –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –ë–î
3. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
4. Graceful responses –¥–ª—è API
"""
import functools
import asyncio
import time
import random
from typing import Callable, Any, Optional, Dict
from utils.mylogger import Logger
from .circuit_breaker import db_circuit_breaker, CircuitBreakerOpenError
from .fallback import fallback_manager

logger = Logger("graceful_degradation", "graceful_degradation.log")

def graceful_fallback(endpoint_name: str, cache_key: Optional[str] = None, cache_ttl: int = 300):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è graceful fallback –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ë–î.
    
    Args:
        endpoint_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –¥–ª—è fallback response
        cache_key: –ö–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        cache_ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Circuit Breaker (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç—É—Å—É)
                status = db_circuit_breaker.get_status() or {}
                state = status.get("state")
                if state == "open":
                    logger.warning(f"Circuit Breaker –æ—Ç–∫—Ä—ã—Ç –¥–ª—è {endpoint_name}")
                    return fallback_manager.get_graceful_response(endpoint_name)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                result = await func(*args, **kwargs)
                
                # –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤–∫–ª—é—á–∞—è falsy –∑–Ω–∞—á–µ–Ω–∏—è: 0, [], {}, False)
                if cache_key and result is not None:
                    fallback_manager.set_cached_data(cache_key, result, cache_ttl)
                
                return result
                
            except CircuitBreakerOpenError:
                logger.warning(f"Circuit Breaker –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª {endpoint_name}")
                return fallback_manager.get_graceful_response(endpoint_name)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ {endpoint_name}: {e}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤–∫–ª—é—á–∞—è falsy –∑–Ω–∞—á–µ–Ω–∏—è: 0, [], {}, False)
                if cache_key:
                    cached_data = fallback_manager.get_cached_data(cache_key)
                    if cached_data is not None:
                        logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {endpoint_name}")
                        return fallback_manager.get_graceful_response(
                            endpoint_name, cached_data
                        )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback response
                return fallback_manager.get_graceful_response(endpoint_name)
        
        return wrapper
    return decorator

def cache_result(cache_key: str, ttl_seconds: int = 300):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π.
    
    Args:
        cache_key: –ö–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        ttl_seconds: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_result = fallback_manager.get_cached_data(cache_key)
            if cached_result is not None:
                logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {cache_key}")
                return cached_result
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            result = await func(*args, **kwargs)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result is not None:
                fallback_manager.set_cached_data(cache_key, result, ttl_seconds)
            
            return result
        
        return wrapper
    return decorator

def critical_data_save(data_key: str):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        data_key: –ö–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            result = await func(*args, **kwargs)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if result is not None:
                fallback_manager.save_critical_data(data_key, result)
            
            return result
        
        return wrapper
    return decorator

class GracefulDegradationManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è graceful degradation.
    """
    
    def __init__(self, base_backoff: float = 1.0, max_backoff: float = 60.0):
        self._degradation_mode = False
        self._degradation_start_time = None
        self._recovery_attempts = 0
        self._max_recovery_attempts = 5
        self._base_backoff = base_backoff
        self._max_backoff = max_backoff
        
        logger.info("Graceful Degradation Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def enter_degradation_mode(self, reason: str = "Unknown"):
        """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º graceful degradation"""
        self._degradation_mode = True
        self._degradation_start_time = time.time()
        logger.warning(f"üö® –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º graceful degradation: {reason}")
    
    def exit_degradation_mode(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ graceful degradation"""
        if self._degradation_mode:
            duration = time.time() - self._degradation_start_time
            self._degradation_mode = False
            self._degradation_start_time = None
            self._recovery_attempts = 0  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            logger.info(f"‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ graceful degradation (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}s)")
    
    def is_in_degradation_mode(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–µ–∂–∏–º–µ degradation"""
        return self._degradation_mode
    
    def get_degradation_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ graceful degradation"""
        return {
            "degradation_mode": self._degradation_mode,
            "degradation_start_time": self._degradation_start_time,
            "degradation_duration": time.time() - self._degradation_start_time if self._degradation_start_time else 0,
            "recovery_attempts": self._recovery_attempts,
            "max_recovery_attempts": self._max_recovery_attempts,
            "base_backoff": self._base_backoff,
            "max_backoff": self._max_backoff,
            "circuit_breaker_status": db_circuit_breaker.get_status(),
            "fallback_manager_status": fallback_manager.get_status()
        }
    
    async def attempt_recovery(self) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∂–∏–º–∞ degradation"""
        if not self._degradation_mode:
            return True
        
        if self._recovery_attempts >= self._max_recovery_attempts:
            logger.warning("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            return False
        
        self._recovery_attempts += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É —Å jitter
        backoff_delay = min(
            self._base_backoff * (2 ** (self._recovery_attempts - 1)), 
            self._max_backoff
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Å–ª—É—á–∞–π–Ω—ã–π jitter (¬±10% –æ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏)
        jitter = random.uniform(-0.1, 0.1) * backoff_delay
        final_delay = max(0.1, backoff_delay + jitter)  # –ú–∏–Ω–∏–º—É–º 0.1 —Å–µ–∫—É–Ω–¥—ã
        
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è #{self._recovery_attempts} - –∑–∞–¥–µ—Ä–∂–∫–∞: {final_delay:.2f}s")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π Circuit Breaker
        await asyncio.sleep(final_delay)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Circuit Breaker (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç—É—Å—É)
            cb_status = db_circuit_breaker.get_status()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω –∏ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
            if not cb_status or not isinstance(cb_status, dict):
                logger.warning("Circuit Breaker –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False
            
            state = cb_status.get("state")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "closed"
            if state == "closed":
                self.exit_degradation_mode()
                return True
            
            # –ï—Å–ª–∏ Circuit Breaker –≤ HALF_OPEN, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            if state == "half_open":
                logger.info("Circuit Breaker –≤ HALF_OPEN —Å–æ—Å—Ç–æ—è–Ω–∏–∏ - –æ–∂–∏–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è...")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–æ–≤–∏–Ω—É –æ—Ç —Ç–µ–∫—É—â–µ–π –∑–∞–¥–µ—Ä–∂–∫–∏, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 5 —Å–µ–∫—É–Ω–¥
                half_open_delay = min(final_delay * 0.5, 5.0)
                await asyncio.sleep(half_open_delay)
                return False
            
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if state is None:
                logger.warning("Circuit Breaker –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'state'")
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
graceful_manager = GracefulDegradationManager()

def handle_database_error(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å graceful degradation.
    """
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except CircuitBreakerOpenError:
            graceful_manager.enter_degradation_mode("Circuit Breaker –æ—Ç–∫—Ä—ã—Ç")
            raise
        except Exception as e:
            if "database" in str(e).lower() or "connection" in str(e).lower():
                graceful_manager.enter_degradation_mode(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
            raise
    return wrapper

def graceful_response(endpoint_name: str):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è graceful response –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ {endpoint_name}: {e}")
                return fallback_manager.get_graceful_response(endpoint_name)
        return wrapper
    return decorator
