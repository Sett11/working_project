"""
–ú–æ–¥—É–ª—å Circuit Breaker –¥–ª—è graceful degradation –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ë–î.

Circuit Breaker –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
–ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è –∫–∞—Å–∫–∞–¥–Ω—ã–µ —Å–±–æ–∏.
"""
import asyncio
import time
import os
import threading
from enum import Enum
from typing import Optional, Callable, Any
from utils.mylogger import Logger

logger = Logger("circuit_breaker", "circuit_breaker.log")

class CircuitState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è Circuit Breaker"""
    CLOSED = "closed"      # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    OPEN = "open"          # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    HALF_OPEN = "half_open"  # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã

class CircuitBreakerOpenError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤–æ–∑–Ω–∏–∫–∞—é—â–µ–µ –∫–æ–≥–¥–∞ Circuit Breaker –æ—Ç–∫—Ä—ã—Ç"""
    pass

class CircuitBreaker:
    """
    Circuit Breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–±–æ–µ–≤ –ë–î.
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
    1. CLOSED: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ—Ö–æ–¥—è—Ç
    2. OPEN: –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
    3. HALF_OPEN: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
    """
    
    def __init__(
        self,
        failure_threshold: int = 5,        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
        recovery_timeout: int = 300,       # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (5 –º–∏–Ω—É—Ç)
        expected_exception: type = Exception,  # –¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        monitor_interval: int = 300        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (5 –º–∏–Ω—É—Ç - —É–≤–µ–ª–∏—á–µ–Ω–æ —Å 1 –º–∏–Ω—É—Ç—ã –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU)
    ):
        self.failure_threshold = failure_threshold
        self.recovery_timeout = recovery_timeout
        self.expected_exception = expected_exception
        self.monitor_interval = monitor_interval
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state = CircuitState.CLOSED
        self.failure_count = 0
        self.last_failure_time = None
        self.last_success_time = None
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self._monitor_task = None
        self._monitoring_active = False
        self._state_lock = None  # –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Lock (—Å–æ–∑–¥–∞—ë—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏)
        
        logger.info(f"Circuit Breaker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: threshold={failure_threshold}, "
                   f"timeout={recovery_timeout}s, monitor_interval={monitor_interval}s")
    
    @property
    def state_lock(self):
        """
        –õ–µ–Ω–∏–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ asyncio.Lock –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏.
        –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç RuntimeError –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è (–∫–æ–≥–¥–∞ –µ—â—ë –Ω–µ—Ç running event loop).
        """
        if self._state_lock is None:
            try:
                self._state_lock = asyncio.Lock()
            except RuntimeError:
                # –ù–µ—Ç running event loop - Lock –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–∑–∂–µ
                logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å asyncio.Lock (–Ω–µ—Ç running loop), –æ—Ç–ª–æ–∂–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
                return None
        return self._state_lock
    
    def _safe_schedule_coroutine(self, coro):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—É—Ç–∏–Ω—ã –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
        
        Args:
            coro: –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π running event loop
            loop = asyncio.get_running_loop()
            # –ï—Å–ª–∏ loop –∑–∞–ø—É—â–µ–Ω, –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –±–µ–∑–æ–ø–∞—Å–Ω–æ
            loop.call_soon_threadsafe(asyncio.create_task, coro)
            logger.debug("–ö–æ—Ä—É—Ç–∏–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ call_soon_threadsafe")
        except RuntimeError:
            # –ù–µ—Ç running event loop, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
            def run_in_thread():
                try:
                    asyncio.run(coro)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ—Ä—É—Ç–∏–Ω—ã –≤ –ø–æ—Ç–æ–∫–µ: {e}")
            
            thread = threading.Thread(target=run_in_thread, daemon=True)
            thread.start()
            logger.debug("–ö–æ—Ä—É—Ç–∏–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–Ω–µ—Ç running event loop)")
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if self._monitoring_active:
            return
            
        self._monitoring_active = True
        self._monitor_task = asyncio.create_task(self._monitor_loop())
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Circuit Breaker –∑–∞–ø—É—â–µ–Ω")
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self._monitoring_active = False
        if self._monitor_task:
            self._monitor_task.cancel()
            try:
                await self._monitor_task
            except asyncio.CancelledError:
                pass
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Circuit Breaker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU)"""
        while self._monitoring_active:
            try:
                await self._check_state_transition()
                await asyncio.sleep(self.monitor_interval)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Circuit Breaker: {e}")
                await asyncio.sleep(60)  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 10 –¥–æ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
    
    async def _check_state_transition(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        current_time = time.time()
        
        if self.state == CircuitState.OPEN:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ HALF_OPEN
            if (self.last_failure_time and 
                current_time - self.last_failure_time >= self.recovery_timeout):
                # –ó–∞—â–∏—Ç–∞ –æ—Ç state_lock = None
                if self.state_lock is None:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø—Ä—è–º—É—é
                    if (self.state == CircuitState.OPEN and self.last_failure_time and 
                        current_time - self.last_failure_time >= self.recovery_timeout):
                        await self._transition_to_half_open()
                else:
                    async with self.state_lock:
                        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π (double-checked locking)
                        if (self.state == CircuitState.OPEN and self.last_failure_time and 
                            current_time - self.last_failure_time >= self.recovery_timeout):
                            await self._transition_to_half_open()
        
        elif self.state == CircuitState.HALF_OPEN:
            # –í HALF_OPEN —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
            # –ü–µ—Ä–µ—Ö–æ–¥ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω—ã—Ö/–Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
            pass
    
    async def _transition_to_half_open(self):
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ HALF_OPEN.
        –í–ê–ñ–ù–û: –í—ã–∑—ã–≤–∞—é—â–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –¥–µ—Ä–∂–∞—Ç—å self.state_lock!
        """
        self.state = CircuitState.HALF_OPEN
        self.failure_count = 0
        logger.warning("üîÑ Circuit Breaker –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ HALF_OPEN - "
                      "—Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î")
    
    async def _transition_to_open(self):
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ OPEN (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞).
        –í–ê–ñ–ù–û: –í—ã–∑—ã–≤–∞—é—â–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –¥–µ—Ä–∂–∞—Ç—å self.state_lock!
        """
        self.state = CircuitState.OPEN
        self.last_failure_time = time.time()
        logger.error(f"üö® Circuit Breaker –û–¢–ö–†–´–¢ - –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î "
                    f"–Ω–∞ {self.recovery_timeout} —Å–µ–∫—É–Ω–¥")
    
    async def _transition_to_closed(self):
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CLOSED (–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞).
        –í–ê–ñ–ù–û: –í—ã–∑—ã–≤–∞—é—â–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –¥–µ—Ä–∂–∞—Ç—å self.state_lock!
        """
        self.state = CircuitState.CLOSED
        self.failure_count = 0
        self.last_success_time = time.time()
        logger.info("‚úÖ Circuit Breaker –ó–ê–ö–†–´–¢ - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ë–î –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def _on_success(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è call())"""
        if self.state == CircuitState.HALF_OPEN:
            # –í HALF_OPEN —É—Å–ø–µ—Ö –æ–∑–Ω–∞—á–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
            self._safe_schedule_coroutine(self._safe_transition_to_closed())
        else:
            # –í CLOSED –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self.failure_count = 0
            self.last_success_time = time.time()
    
    async def _a_on_success(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è acall())"""
        if self.state == CircuitState.HALF_OPEN:
            # –í HALF_OPEN —É—Å–ø–µ—Ö –æ–∑–Ω–∞—á–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î - –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞
            await self._safe_transition_to_closed()
        else:
            # –í CLOSED –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self.failure_count = 0
            self.last_success_time = time.time()

    async def _safe_transition_to_closed(self):
        """Thread-safe –ø–µ—Ä–µ—Ö–æ–¥ –≤ CLOSED —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ HALF_OPEN"""
        # –ó–∞—â–∏—Ç–∞ –æ—Ç state_lock = None
        if self.state_lock is None:
            # –ï—Å–ª–∏ –Ω–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞–ø—Ä—è–º—É—é
            if self.state == CircuitState.HALF_OPEN:
                await self._transition_to_closed()
        else:
            async with self.state_lock:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π, –∑–∞—Ç–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ _transition_to_closed
                # (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∑–∞—Ö–≤–∞—á–µ–Ω–∞, –ø–æ—ç—Ç–æ–º—É –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ –Ω–µ –±—É–¥–µ—Ç)
                if self.state == CircuitState.HALF_OPEN:
                    await self._transition_to_closed()
    
    async def _safe_transition_to_open(self):
        """Thread-safe –ø–µ—Ä–µ—Ö–æ–¥ –≤ OPEN —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ OPEN
        if self.state is None:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ OPEN –ø—Ä–∏ state=None, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        if self.state == CircuitState.OPEN:
            logger.debug("Circuit Breaker —É–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ OPEN, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥")
            return
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç state_lock = None
        if self.state_lock is None:
            # –ï—Å–ª–∏ –Ω–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞–ø—Ä—è–º—É—é
            logger.debug("state_lock=None, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ OPEN –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
            await self._transition_to_open()
        else:
            async with self.state_lock:
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π (double-checked locking)
                if self.state != CircuitState.OPEN:
                    await self._transition_to_open()
    
    def _on_failure(self, error: Exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è call())"""
        self.failure_count += 1
        self.last_failure_time = time.time()
        
        logger.warning(f"–û—à–∏–±–∫–∞ –ë–î #{self.failure_count}: {error}")
        
        if self.state == CircuitState.CLOSED:
            if self.failure_count >= self.failure_threshold:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ñ–æ–Ω–µ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π)
                self._safe_schedule_coroutine(self._safe_transition_to_open())
        
        elif self.state == CircuitState.HALF_OPEN:
            # –í HALF_OPEN –ª—é–±–∞—è –æ—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ OPEN (–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤ —Ñ–æ–Ω–µ)
            self._safe_schedule_coroutine(self._safe_transition_to_open())
    
    async def _a_on_failure(self, error: Exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è acall())"""
        self.failure_count += 1
        self.last_failure_time = time.time()
        
        logger.warning(f"–û—à–∏–±–∫–∞ –ë–î #{self.failure_count}: {error}")
        
        if self.state == CircuitState.CLOSED:
            if self.failure_count >= self.failure_threshold:
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ OPEN –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
                await self._safe_transition_to_open()
        
        elif self.state == CircuitState.HALF_OPEN:
            # –í HALF_OPEN –ª—é–±–∞—è –æ—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ OPEN - –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞
            await self._safe_transition_to_open()
    
    def call(self, func: Callable, *args, **kwargs) -> Any:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –∑–∞—â–∏—Ç–æ–π Circuit Breaker.
        
        Args:
            func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            *args, **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
            
        Raises:
            CircuitBreakerOpenError: –ï—Å–ª–∏ Circuit Breaker –æ—Ç–∫—Ä—ã—Ç
            Exception: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        """
        if self.state == CircuitState.OPEN:
            raise CircuitBreakerOpenError(
                f"Circuit Breaker –æ—Ç–∫—Ä—ã—Ç. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {self.last_failure_time}"
            )
        
        try:
            result = func(*args, **kwargs)
            self._on_success()
            return result
        except self.expected_exception as e:
            self._on_failure(e)
            raise
    
    async def acall(self, func: Callable, *args, **kwargs) -> Any:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è call().
        """
        if self.state == CircuitState.OPEN:
            raise CircuitBreakerOpenError(
                f"Circuit Breaker –æ—Ç–∫—Ä—ã—Ç. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {self.last_failure_time}"
            )
        
        try:
            result = await func(*args, **kwargs)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
            await self._a_on_success()
            return result
        except self.expected_exception as e:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
            await self._a_on_failure(e)
            raise
    
    def get_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Circuit Breaker"""
        return {
            "state": self.state.value,
            "failure_count": self.failure_count,
            "failure_threshold": self.failure_threshold,
            "last_failure_time": self.last_failure_time,
            "last_success_time": self.last_success_time,
            "recovery_timeout": self.recovery_timeout,
            "monitoring_active": self._monitoring_active
        }

def _safe_int(env_name: str, default: int) -> int:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ int.
    
    Args:
        env_name: –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
    Returns:
        –¶–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ default –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        value = os.getenv(env_name)
        if value is None:
            return default
        return int(value)
    except (ValueError, TypeError) as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å {env_name}='{os.getenv(env_name)}' –≤ int: {e}. "
                      f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default}")
        return default

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Circuit Breaker –¥–ª—è –ë–î
db_circuit_breaker = CircuitBreaker(
    failure_threshold=_safe_int("CB_FAILURE_THRESHOLD", 3),
    recovery_timeout=_safe_int("CB_RECOVERY_TIMEOUT", 300),
    expected_exception=(Exception,),  # –í—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    monitor_interval=_safe_int("CB_MONITOR_INTERVAL", 300)  # 300 —Å–µ–∫—É–Ω–¥ (5 –º–∏–Ω—É—Ç)
)