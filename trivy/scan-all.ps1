# =============================================================================
# Trivy Security Scanner - Scan All Containers
# =============================================================================
# –û–ø–∏—Å–∞–Ω–∏–µ: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö Docker –æ–±—Ä–∞–∑–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
# –ê–≤—Ç–æ—Ä: Security Team
# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-10-08
# =============================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞
$ErrorActionPreference = "Continue"
$ProgressPreference = "Continue"

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================================================

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$COLOR_GREEN = "Green"
$COLOR_RED = "Red"
$COLOR_YELLOW = "Yellow"
$COLOR_CYAN = "Cyan"
$COLOR_MAGENTA = "Magenta"

# –ü–æ–ª—É—á–∞–µ–º COMPOSE_PROJECT_NAME –∏–∑ .env –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
$envFile = Join-Path $PSScriptRoot ".." ".env"
$projectName = "working_project"

if (Test-Path $envFile) {
    Get-Content $envFile | ForEach-Object {
        if ($_ -match "^COMPOSE_PROJECT_NAME=(.+)$") {
            $projectName = $matches[1]
            Write-Host "‚úì –ù–∞–π–¥–µ–Ω COMPOSE_PROJECT_NAME: $projectName" -ForegroundColor $COLOR_GREEN
        }
    }
}

# –û–±—Ä–∞–∑—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
$images = @{
    "Backend" = "${projectName}_backend"
    "Frontend" = "${projectName}_frontend"
    "Database" = "postgres:15-alpine"
}

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –∏ –ª–æ–≥–æ–≤
$reportsDir = Join-Path $PSScriptRoot "reports"
$logsDir = Join-Path $PSScriptRoot "logs"
$cacheDir = Join-Path $PSScriptRoot "cache"
$timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
$summaryFile = Join-Path $reportsDir "summary_${timestamp}.txt"

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
if (-not (Test-Path $reportsDir)) {
    New-Item -ItemType Directory -Path $reportsDir -Force | Out-Null
}
if (-not (Test-Path $logsDir)) {
    New-Item -ItemType Directory -Path $logsDir -Force | Out-Null
}
if (-not (Test-Path $cacheDir)) {
    New-Item -ItemType Directory -Path $cacheDir -Force | Out-Null
}

# =============================================================================
# –§–£–ù–ö–¶–ò–ò
# =============================================================================

function Write-Banner {
    param([string]$text)
    Write-Host "`n$("=" * 80)" -ForegroundColor $COLOR_CYAN
    Write-Host "  $text" -ForegroundColor $COLOR_CYAN
    Write-Host "$("=" * 80)`n" -ForegroundColor $COLOR_CYAN
}

function Write-Section {
    param([string]$text)
    Write-Host "`n$("-" * 80)" -ForegroundColor $COLOR_MAGENTA
    Write-Host "  $text" -ForegroundColor $COLOR_MAGENTA
    Write-Host "$("-" * 80)" -ForegroundColor $COLOR_MAGENTA
}

function Check-DockerImage {
    param([string]$imageName)
    
    $exists = docker images -q $imageName 2>$null
    return $null -ne $exists -and $exists -ne ""
}

function Scan-Image {
    param(
        [string]$imageName,
        [string]$displayName
    )
    
    Write-Section "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: $displayName"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞
    if (-not (Check-DockerImage $imageName)) {
        Write-Host "‚ö† –û–±—Ä–∞–∑ '$imageName' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º..." -ForegroundColor $COLOR_YELLOW
        return @{
            Name = $displayName
            Image = $imageName
            Status = "Skipped"
            Critical = 0
            High = 0
            Medium = 0
            Low = 0
        }
    }
    
    Write-Host "‚úì –û–±—Ä–∞–∑ –Ω–∞–π–¥–µ–Ω: $imageName" -ForegroundColor $COLOR_GREEN
    Write-Host "  –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ..." -ForegroundColor $COLOR_CYAN
    
    # –§–∞–π–ª—ã –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
    $safeImageName = $imageName -replace "[:/]", "_"
    $jsonReport = Join-Path $reportsDir "scan_${safeImageName}_${timestamp}.json"
    $tableReport = Join-Path $reportsDir "scan_${safeImageName}_${timestamp}.txt"
    $htmlReport = Join-Path $reportsDir "scan_${safeImageName}_${timestamp}.html"
    
    try {
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        Write-Host "`n  ‚Üí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ (—Ç–∞–±–ª–∏—Ü–∞)..." -ForegroundColor $COLOR_CYAN
        docker run --rm `
            -v /var/run/docker.sock:/var/run/docker.sock `
            -v "${PSScriptRoot}:/config:ro" `
            -v "${reportsDir}:/reports" `
            -v "${cacheDir}:/cache" `
            -e TRIVY_CACHE_DIR=/cache `
            aquasec/trivy:0.63.0 `
            image `
            --severity CRITICAL,HIGH,MEDIUM `
            --format table `
            --output /reports/temp_table.txt `
            $imageName
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if (Test-Path (Join-Path $reportsDir "temp_table.txt")) {
            Move-Item (Join-Path $reportsDir "temp_table.txt") $tableReport -Force
        }
        
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—ã–≤–æ–¥–æ–º –≤ JSON –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        Write-Host "  ‚Üí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ (JSON)..." -ForegroundColor $COLOR_CYAN
        docker run --rm `
            -v /var/run/docker.sock:/var/run/docker.sock `
            -v "${PSScriptRoot}:/config:ro" `
            -v "${reportsDir}:/reports" `
            -v "${cacheDir}:/cache" `
            -e TRIVY_CACHE_DIR=/cache `
            aquasec/trivy:0.63.0 `
            image `
            --severity CRITICAL,HIGH,MEDIUM,LOW `
            --format json `
            --output /reports/temp_json.json `
            $imageName
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if (Test-Path (Join-Path $reportsDir "temp_json.json")) {
            Move-Item (Join-Path $reportsDir "temp_json.json") $jsonReport -Force
        }
        
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ JSON
        $results = @{
            Name = $displayName
            Image = $imageName
            Status = "Completed"
            Critical = 0
            High = 0
            Medium = 0
            Low = 0
        }
        
        if (Test-Path $jsonReport) {
            $jsonContent = Get-Content $jsonReport -Raw | ConvertFrom-Json
            
            foreach ($result in $jsonContent.Results) {
                if ($result.Vulnerabilities) {
                    foreach ($vuln in $result.Vulnerabilities) {
                        switch ($vuln.Severity) {
                            "CRITICAL" { $results.Critical++ }
                            "HIGH"     { $results.High++ }
                            "MEDIUM"   { $results.Medium++ }
                            "LOW"      { $results.Low++ }
                        }
                    }
                }
            }
        }
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        Write-Host "`n  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:" -ForegroundColor $COLOR_CYAN
        Write-Host "     üî¥ CRITICAL: $($results.Critical)" -ForegroundColor $(if ($results.Critical -gt 0) { $COLOR_RED } else { $COLOR_GREEN })
        Write-Host "     üü† HIGH:     $($results.High)" -ForegroundColor $(if ($results.High -gt 0) { $COLOR_RED } else { $COLOR_GREEN })
        Write-Host "     üü° MEDIUM:   $($results.Medium)" -ForegroundColor $(if ($results.Medium -gt 0) { $COLOR_YELLOW } else { $COLOR_GREEN })
        Write-Host "     üîµ LOW:      $($results.Low)" -ForegroundColor $COLOR_CYAN
        
        Write-Host "`n  ‚úì –û—Ç—á—ë—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:" -ForegroundColor $COLOR_GREEN
        Write-Host "     ‚Ä¢ JSON:  $jsonReport" -ForegroundColor $COLOR_CYAN
        Write-Host "     ‚Ä¢ Table: $tableReport" -ForegroundColor $COLOR_CYAN
        
        return $results
    }
    catch {
        Write-Host "‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: $_" -ForegroundColor $COLOR_RED
        return @{
            Name = $displayName
            Image = $imageName
            Status = "Error"
            Critical = 0
            High = 0
            Medium = 0
            Low = 0
            Error = $_.Exception.Message
        }
    }
}

# =============================================================================
# –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
# =============================================================================

Write-Banner "üõ°Ô∏è  TRIVY SECURITY SCANNER - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤"

Write-Host "üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:" -ForegroundColor $COLOR_CYAN
Write-Host "   ‚Ä¢ –ü—Ä–æ–µ–∫—Ç: $projectName" -ForegroundColor White
Write-Host "   ‚Ä¢ –û–±—Ä–∞–∑–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: $($images.Count)" -ForegroundColor White
Write-Host "   ‚Ä¢ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—Ç—á—ë—Ç–æ–≤: $reportsDir" -ForegroundColor White
Write-Host "   ‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: $timestamp" -ForegroundColor White

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker
Write-Section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
try {
    $dockerVersion = docker --version
    Write-Host "‚úì Docker: $dockerVersion" -ForegroundColor $COLOR_GREEN
}
catch {
    Write-Host "‚úó Docker –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop." -ForegroundColor $COLOR_RED
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–∑–∞ Trivy
Write-Host "  –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ Trivy..." -ForegroundColor $COLOR_CYAN
$pullOutput = docker pull aquasec/trivy:0.63.0 2>&1
$pullExitCode = $LASTEXITCODE

if ($pullExitCode -ne 0) {
    Write-Host "‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑ Trivy!" -ForegroundColor $COLOR_RED
    Write-Host "–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã docker pull:" -ForegroundColor $COLOR_YELLOW
    Write-Host $pullOutput -ForegroundColor $COLOR_YELLOW
    exit 1
}

Write-Host "‚úì –û–±—Ä–∞–∑ Trivy –æ–±–Ω–æ–≤–ª—ë–Ω" -ForegroundColor $COLOR_GREEN

# –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–∑—ã
$allResults = @()
foreach ($entry in $images.GetEnumerator()) {
    $result = Scan-Image -imageName $entry.Value -displayName $entry.Key
    $allResults += $result
    Start-Sleep -Seconds 1
}

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
Write-Banner "üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢"

$summary = @"
================================================================================
                    TRIVY SECURITY SCAN SUMMARY
================================================================================
–î–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
–ü—Ä–æ–µ–∫—Ç: $projectName

$(foreach ($result in $allResults) {
@"
--------------------------------------------------------------------------------
$($result.Name) ($($result.Image))
--------------------------------------------------------------------------------
–°—Ç–∞—Ç—É—Å: $($result.Status)
–£—è–∑–≤–∏–º–æ—Å—Ç–∏:
  üî¥ CRITICAL: $($result.Critical)
  üü† HIGH:     $($result.High)
  üü° MEDIUM:   $($result.Medium)
  üîµ LOW:      $($result.Low)

"@
})

================================================================================
–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
================================================================================
–í—Å–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤: $($allResults.Count)
–ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: $($allResults | Where-Object { $_.Status -eq "Completed" } | Measure-Object | Select-Object -ExpandProperty Count)
–ü—Ä–æ–ø—É—â–µ–Ω–æ: $($allResults | Where-Object { $_.Status -eq "Skipped" } | Measure-Object | Select-Object -ExpandProperty Count)
–û—à–∏–±–æ–∫: $($allResults | Where-Object { $_.Status -eq "Error" } | Measure-Object | Select-Object -ExpandProperty Count)

–í—Å–µ–≥–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:
  üî¥ CRITICAL: $(($allResults | Measure-Object -Property Critical -Sum).Sum)
  üü† HIGH:     $(($allResults | Measure-Object -Property High -Sum).Sum)
  üü° MEDIUM:   $(($allResults | Measure-Object -Property Medium -Sum).Sum)
  üîµ LOW:      $(($allResults | Measure-Object -Property Low -Sum).Sum)

================================================================================
–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
================================================================================
$( if ((($allResults | Measure-Object -Property Critical -Sum).Sum) -gt 0) {
    "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã CRITICAL —É—è–∑–≤–∏–º–æ—Å—Ç–∏! –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!"
} elseif ((($allResults | Measure-Object -Property High -Sum).Sum) -gt 0) {
    "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã HIGH —É—è–∑–≤–∏–º–æ—Å—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
} else {
    "‚úì –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
})

–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $reportsDir
================================================================================
"@

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
$summary | Out-File -FilePath $summaryFile -Encoding UTF8
Write-Host $summary -ForegroundColor White

Write-Host "`n‚úì –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: $summaryFile" -ForegroundColor $COLOR_GREEN

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
$totalCritical = ($allResults | Measure-Object -Property Critical -Sum).Sum
$totalHigh = ($allResults | Measure-Object -Property High -Sum).Sum

if ($totalCritical -gt 0) {
    Write-Host "`n‚ùå –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ú–ò –£–Ø–ó–í–ò–ú–û–°–¢–Ø–ú–ò" -ForegroundColor $COLOR_RED
    exit 1
} elseif ($totalHigh -gt 0) {
    Write-Host "`n‚ö†Ô∏è  –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° HIGH –£–Ø–ó–í–ò–ú–û–°–¢–Ø–ú–ò" -ForegroundColor $COLOR_YELLOW
    exit 0
} else {
    Write-Host "`n‚úÖ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û" -ForegroundColor $COLOR_GREEN
    exit 0
}

