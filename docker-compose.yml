services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
      - ./db/docs:/db/docs:ro  # Данные каталогов (read-only)
      - backups:/backups
    expose:
      - "5432"
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_backend
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_URL_SYNC=${DATABASE_URL_SYNC}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_EXPIRATION_HOURS=${JWT_EXPIRATION_HOURS}
      - BACKEND_HOST=${BACKEND_HOST}
      - BACKEND_PORT=${BACKEND_PORT}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - POOL_DRAIN_TIMEOUT=${POOL_DRAIN_TIMEOUT}
      - DB_TIMEOUT=${DB_TIMEOUT}
      - DB_INTERVAL=${DB_INTERVAL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - SEEDER_FLAG_FILE=${SEEDER_FLAG_FILE}
    volumes:
      # Монтируем только необходимые директории (без ./backend:/app)
      - ./backend/api:/app/api:ro
      - ./backend/utils:/app/utils:ro
      - ./backend/init.sh:/app/init.sh:ro
      - ./backend/entrypoint.sh:/app/entrypoint.sh:ro
      - ./db:/app/db  # Backend имеет доступ к db для записи PDF
      - ./logs:/app/logs
      - seeder_state:/app/.seeder_data  # Volume для хранения состояния seeder
    ports:
      - "${BACKEND_PORT}:8000"
    depends_on:
      db:
        condition: service_healthy
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=/api
    container_name: ${COMPOSE_PROJECT_NAME}_frontend
    volumes:
      - ./logs:/var/log/nginx:rw  # Логи nginx в общую папку logs
    ports:
      - "${FRONTEND_PORT}:80"
    depends_on:
      - backend
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  backups:
    driver: local
  seeder_state:
    driver: local

networks:
  default:
    name: ${COMPOSE_PROJECT_NAME}_network
