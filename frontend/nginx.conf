server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;
    
    # Логирование в файлы
    access_log /var/log/nginx/frontend.log combined;
    error_log /var/log/nginx/frontend_error.log warn;
    
    # Проксируем API запросы на backend
    location /api/ {
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 90s;
        proxy_connect_timeout 90s;
        proxy_send_timeout 90s;
    }
    
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    # Кэширование статических файлов
    location ~* \.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # ========================================================================
    # Заголовки безопасности (Security Headers)
    # ========================================================================
    
    # Content Security Policy (CSP)
    # ПРИМЕЧАНИЕ: Material-UI использует Emotion (CSS-in-JS), который требует 'unsafe-inline' для style-src
    # Emotion динамически инжектирует стили в <style> теги, что невозможно без 'unsafe-inline'
    # TODO для Production:
    #   1. Рассмотреть внедрение CSP nonces через SSR (Server-Side Rendering)
    #   2. Альтернатива: миграция на CSS модули или статические стили
    #   3. Настроить HTTPS перед применением строгих CSP политик
    # Документация Emotion CSP: https://emotion.sh/docs/content-security-policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: blob:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self'; object-src 'none';" always;
    
    # Strict-Transport-Security (HSTS)
    # ВНИМАНИЕ: HSTS НЕ РАБОТАЕТ через HTTP! Этот заголовок игнорируется браузерами на порту 80.
    # УДАЛЕНО из HTTP блока. Будет добавлено после настройки HTTPS.
    # TODO для Production:
    #   1. Настроить SSL/TLS сертификаты (Let's Encrypt рекомендуется)
    #   2. Создать server block на порту 443 с ssl_certificate и ssl_certificate_key
    #   3. Добавить HTTP → HTTPS редирект в этот блок (return 301 https://$host$request_uri;)
    #   4. Переместить HSTS заголовок в HTTPS server block:
    #      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    # Документация HSTS: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
    
    # Referrer Policy - контроль передачи referrer информации
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Permissions Policy - ограничение доступа к браузерным API
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), interest-cohort=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=()" always;
    
    # X-Frame-Options - защита от clickjacking (для обратной совместимости)
    # Дублирует CSP frame-ancestors, но поддерживается старыми браузерами
    # DENY полностью согласуется с CSP frame-ancestors 'none' - блокирует любое встраивание во фреймы
    add_header X-Frame-Options "DENY" always;
    
    # X-Content-Type-Options - предотвращение MIME-type sniffing
    add_header X-Content-Type-Options "nosniff" always;
    
    # Gzip сжатие
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;
}
