version: '3.8'

services:
  backend:
    build: .
    container_name: ${COMPOSE_PROJECT_NAME}_backend
    dns:
      - 8.8.8.8
      - 8.8.4.4
    command: >
      sh -c "
        sh ./init.sh &&
        uvicorn back.back:app --host 0.0.0.0 --port 8001 --reload --log-level info --access-log
      "
    volumes:
      - ./back:/app/back
      - ./front:/app/front
      - ./db:/app/db
      - ./utils:/app/utils
      - ./commercial_offer_pdf:/app/commercial_offer_pdf
      - ./logs:/app/logs
      - ./init.sh:/app/init.sh
      - ./main.py:/app/main.py
      - ./requirements.txt:/app/requirements.txt
      - seeder_flag:/app/.seeder_flag
    ports:
      - "8001:8001"
    depends_on:
      - db
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_URL_SYNC=postgresql://postgres:postgres@db:5432/form_com_offer_db
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  frontend:
    build: .
    container_name: ${COMPOSE_PROJECT_NAME}_frontend
    dns:
      - 8.8.8.8
      - 8.8.4.4
    command: python main.py
    volumes:
      - ./front:/app/front
      - ./commercial_offer_pdf:/app/commercial_offer_pdf
      - ./main.py:/app/main.py
      - ./requirements.txt:/app/requirements.txt
    ports:
      - "7860:7860"
    depends_on:
      backend:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7860/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  db:
    image: postgres:15-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./db/init:/docker-entrypoint-initdb.d  # Скрипты инициализации
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    command: >
      postgres
      -c max_connections=50
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=50
      -c random_page_cost=1.1
      -c effective_io_concurrency=100
      -c work_mem=4MB
      -c min_wal_size=512MB
      -c max_wal_size=2GB
      -c max_worker_processes=2
      -c max_parallel_workers_per_gather=1
      -c max_parallel_workers=2
      -c max_parallel_maintenance_workers=1
      -c autovacuum_max_workers=2
      -c log_min_duration_statement=2000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c fsync=on
      -c synchronous_commit=on
      -c full_page_writes=on
      -c listen_addresses='*'
      -c port=5432
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  postgres_data:
  seeder_flag: