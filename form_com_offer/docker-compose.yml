# Убираем версию, так как она устарела

services:
  backend:
    build: .
    container_name: ${COMPOSE_PROJECT_NAME}_backend
    # Используем стандартные DNS настройки
    command: >
      sh -c "
        sh ./init.sh &&
        uvicorn back.back:app --host 0.0.0.0 --port 8001 --reload --log-level warning --no-access-log
      "
    volumes:
      - ./back:/app/back
      - ./front:/app/front
      - ./db:/app/db
      - ./utils:/app/utils
      - ./commercial_offer_pdf:/app/commercial_offer_pdf
      - ./logs:/app/logs
      - ./init.sh:/app/init.sh
      - ./main.py:/app/main.py
      - ./requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
      - seeder_flag:/app/.seeder_flag
    ports:
      - "8001:8001"
    depends_on:
      - db
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_URL_SYNC=${DATABASE_URL_SYNC}
      - SECRET_KEY=${SECRET_KEY}
      - PYTHONIOENCODING=utf-8
      - LANG=C.UTF-8
      - LC_ALL=C.UTF-8
    restart: always
    # Ограничения ресурсов для предотвращения перегрузки системы
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    # Ограничения логирования для предотвращения перегрузки системы
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build: .
    container_name: ${COMPOSE_PROJECT_NAME}_frontend
    # Используем стандартные DNS настройки
    command: python main.py
    volumes:
      - ./front:/app/front
      - ./commercial_offer_pdf:/app/commercial_offer_pdf
      - ./logs:/app/logs
      - ./main.py:/app/main.py
      - ./requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - PYTHONIOENCODING=utf-8
      - LANG=C.UTF-8
      - LC_ALL=C.UTF-8
      - GRADIO_SERVER_NAME=0.0.0.0
      - GRADIO_SERVER_PORT=7860
      - GRADIO_NODE_SERVER_NAME=0.0.0.0
      - GRADIO_NUM_PORTS=200
    ports:
      - "7860:7860"
    depends_on:
      - backend
    restart: always
    # Ограничения ресурсов для предотвращения перегрузки системы
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    # Ограничения логирования для предотвращения перегрузки системы
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  db:
    image: postgres:15-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_db
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    volumes:
      - postgres_data:/var/lib/postgresql/data/  # Используем Docker volume вместо bind mount
      - ./db/init:/docker-entrypoint-initdb.d  # Скрипты инициализации
      - ./db/db_utils:/db_utils  # Утилиты для управления БД
      - ./db/postgresql.conf:/etc/postgresql/postgresql.conf  # Оптимизированная конфигурация
      - backups:/backups  # Именованный том для резервных копий
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      # Настройки для уменьшения verbosity логов PostgreSQL
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      # Убираем PGDATA, так как используем Docker volume
      # Оставляем только базовые переменные PostgreSQL
    # Используем стандартные настройки PostgreSQL
    restart: always
    # Ограничения ресурсов для предотвращения перегрузки системы
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    # Ограничения логирования для предотвращения перегрузки системы
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

volumes:
  postgres_data:  # Volume для данных PostgreSQL
  seeder_flag:
  backups:  # Volume для резервных копий БД