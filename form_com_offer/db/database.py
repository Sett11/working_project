"""
–ú–æ–¥—É–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –ó–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞.
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–ª—è Docker).
- –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ (engine) SQLAlchemy –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ë–î.
- –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π (SessionLocal) –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏.
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (Base).
- –§—É–Ω–∫—Ü–∏—é-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä `get_session` –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö FastAPI.
"""
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.exc import InterfaceError, OperationalError, DBAPIError
import asyncpg
import asyncio
import os
from dotenv import load_dotenv
from utils.mylogger import Logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
# log_file —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –±–µ–∑ –ø–∞–ø–∫–∏ logs, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤.
logger = Logger(name=__name__, log_file="db.log")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env.
# –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –∫–æ–¥–∞.
load_dotenv()
logger.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π DATABASE_URL, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ã—á–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
# –∏–∑ docker-compose –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.
# –ï—Å–ª–∏ –æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DATABASE_URL_LOCAL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.
DATABASE_URL = os.getenv("DATABASE_URL") or os.getenv("DATABASE_URL_LOCAL")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.
if not DATABASE_URL:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (DATABASE_URL –∏–ª–∏ DATABASE_URL_LOCAL) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å DATABASE_URL –∏–ª–∏ DATABASE_URL_LOCAL –≤ .env —Ñ–∞–π–ª–µ")

logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {DATABASE_URL.split('@')[-1]}") # –õ–æ–≥–∏—Ä—É–µ–º –±–µ–∑ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

try:
    # –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ SQLAlchemy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å asyncpg
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫
    engine = create_async_engine(
        DATABASE_URL, 
        echo=False, 
        future=True,
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        pool_size=10,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
        max_overflow=20,  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏
        pool_pre_ping=True,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        pool_recycle=3600,  # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫–∞–∂–¥—ã–π —á–∞—Å
        pool_timeout=30,  # –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è asyncpg
        poolclass=None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É–ª –¥–ª—è async
    )

    # –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
    AsyncSessionLocal = async_sessionmaker(
        engine, 
        expire_on_commit=False, 
        class_=AsyncSession,
        autoflush=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π flush
        autocommit=False  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π commit
    )

    # –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π SQLAlchemy (–æ–±—â–∏–π –¥–ª—è sync/async)
    Base = declarative_base()

    logger.info("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
    # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –±–µ–∑ –ë–î –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ.
    raise

async def get_session():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å FastAPI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞,
    –ø–µ—Ä–µ–¥–∞—ë—Ç –µ–µ –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.

    Yields:
        AsyncSession: –û–±—ä–µ–∫—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ SQLAlchemy.
    """
    max_retries = 3
    retry_count = 0
    
    while retry_count < max_retries:
        try:
            async with AsyncSessionLocal() as session:
                session_id = id(session)
                logger.debug(f"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {session_id} —Å–æ–∑–¥–∞–Ω–∞.")
                try:
                    yield session
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                    
                    is_critical_error = isinstance(e, (
                        InterfaceError,
                        OperationalError,
                        asyncpg.exceptions.ConnectionDoesNotExistError,
                        asyncpg.exceptions.InterfaceError,
                        ConnectionError
                    ))
                    
                    if is_critical_error:
                        logger.warning(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø: {e}")
                        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {retry_count + 1}/{max_retries}")
                        retry_count += 1
                        if retry_count < max_retries:
                            try:
                                await _recreate_connection_pool_with_retry()
                                logger.info("‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω")
                                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
                                await asyncio.sleep(0.5)
                                continue
                            except Exception as recreate_error:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É–ª–∞: {recreate_error}")
                                # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                                delay = min(2 ** retry_count, 30)  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
                                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                                await asyncio.sleep(delay)
                    raise
                finally:
                    logger.debug(f"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {session_id} –∑–∞–∫—Ä—ã—Ç–∞.")
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                    try:
                        pool = engine.pool
                        utilization = (pool.checkedout() / pool.size() * 100) if pool.size() > 0 else 0
                        logger.debug(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞: —Ä–∞–∑–º–µ—Ä={pool.size()}, –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ={pool.checkedin()}, –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏={pool.checkedout()}, —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è={utilization:.1f}%")
                    except Exception as pool_error:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞: {pool_error}")
            break  # –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        except Exception as e:
            retry_count += 1
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries} —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if retry_count >= max_retries:
                logger.error(f"‚ùå –ò–°–ß–ï–†–ü–ê–ù–´ –í–°–ï –ü–û–ü–´–¢–ö–ò –°–û–ó–î–ê–ù–ò–Ø –°–ï–°–°–ò–ò. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!")
                raise
            try:
                await _recreate_connection_pool_with_retry()
                logger.info("‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
                await asyncio.sleep(0.5)
            except Exception as recreate_error:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø—É–ª: {recreate_error}")
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                delay = min(2 ** retry_count, 30)  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(delay)

async def _recreate_connection_pool_with_retry():
    """
    –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏.
    """
    max_pool_recreation_attempts = 3
    attempt = 0
    
    while attempt < max_pool_recreation_attempts:
        attempt += 1
        logger.warning(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π {attempt}/{max_pool_recreation_attempts}")
        
        try:
            await _recreate_connection_pool()
            logger.info(f"‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt}")
            return  # –£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt} –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            
            if attempt >= max_pool_recreation_attempts:
                logger.error(f"‚ùå –ò–°–ß–ï–†–ü–ê–ù–´ –í–°–ï –ü–û–ü–´–¢–ö–ò –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–Ø –ü–£–õ–ê ({max_pool_recreation_attempts}). –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!")
                raise  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
            
            # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            delay = min(2 ** attempt, 30)  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞...")
            await asyncio.sleep(delay)

async def _recreate_connection_pool():
    """
    –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö.
    """
    global engine, AsyncSessionLocal
    try:
        logger.warning("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π engine —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        if engine:
            try:
                await engine.dispose()
                logger.info("‚úÖ –°—Ç–∞—Ä—ã–π engine —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
            except Exception as dispose_error:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ engine: {dispose_error}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        await asyncio.sleep(1)
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ SQLAlchemy —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        engine = create_async_engine(
            DATABASE_URL, 
            echo=False, 
            future=True,
            # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            pool_size=10,
            max_overflow=20,
            pool_pre_ping=True,
            pool_recycle=1800,  # –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è —Ä–µ—Ü–∏–∫–ª–∞ –¥–æ 30 –º–∏–Ω—É—Ç
            pool_timeout=30,
            pool_reset_on_return='commit',  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
            poolclass=None,
        )

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
        AsyncSessionLocal = async_sessionmaker(
            engine, 
            expire_on_commit=False, 
            class_=AsyncSession,
            autoflush=False,
            autocommit=False
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –ø—É–ª–∞
        try:
            async with AsyncSessionLocal() as test_session:
                from sqlalchemy import text
                await test_session.execute(text("SELECT 1"))
            logger.info("‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as test_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—É–ª–∞: {test_error}")
            raise
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
        raise