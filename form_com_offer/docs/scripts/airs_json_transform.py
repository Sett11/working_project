#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ airs.json

–§—É–Ω–∫—Ü–∏–∏:
1. –£–±–∏—Ä–∞–µ—Ç –ø–æ–ª–µ "class" —É –≤—Å–µ—Ö –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤
2. –§–∏–ª—å—Ç—Ä—É–µ—Ç –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
   - model_name = "moke"
   - series —Å–æ–¥–µ—Ä–∂–∏—Ç "–ö–æ–ª–æ–Ω–Ω—ã–π"
3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ new_airs.json
"""

import json
import os
from pathlib import Path

def transform_airs_data(input_file: str, output_file: str):
    """
    –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ airs.json –≤ new_airs.json
    
    Args:
        input_file (str): –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É airs.json
        output_file (str): –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É new_airs.json
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists(input_file):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        print(f"üìñ –ß–∏—Ç–∞—é —Ñ–∞–π–ª {input_file}...")
        with open(input_file, 'r', encoding='utf-8') as f:
            json_data = json.load(f)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if "air_conditioners" in json_data:
            airs_data = json_data["air_conditioners"]
        else:
            # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥—Ä—É–≥–∞—è, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª –∫–∞–∫ —Å–ø–∏—Å–æ–∫
            airs_data = json_data if isinstance(json_data, list) else []
        
        print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(airs_data)} –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        filtered_airs = []
        removed_count = 0
        seen_model_names = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö model_name
        
        for air in airs_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            should_remove = False
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–π 1: model_name = "moke"
            if air.get("model_name") == "moke":
                should_remove = True
                print(f"üö´ –£–¥–∞–ª—è—é: model_name = 'moke' - {air.get('model_name', 'N/A')}")
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–π 2: series —Å–æ–¥–µ—Ä–∂–∏—Ç "–ö–æ–ª–æ–Ω–Ω—ã–π"
            elif "–ö–æ–ª–æ–Ω–Ω—ã–π" in air.get("series", ""):
                should_remove = True
                print(f"üö´ –£–¥–∞–ª—è—é: series —Å–æ–¥–µ—Ä–∂–∏—Ç '–ö–æ–ª–æ–Ω–Ω—ã–π' - {air.get('series', 'N/A')}")
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–π 3: model_name –ø—É—Å—Ç–æ–π
            elif air.get("model_name") == "":
                should_remove = True
                print(f"üö´ –£–¥–∞–ª—è—é: model_name –ø—É—Å—Ç–æ–π - '{air.get('model_name', 'N/A')}'")
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–π 4: model_name —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
            elif air.get("model_name") in seen_model_names:
                should_remove = True
                print(f"üö´ –£–¥–∞–ª—è—é: –¥—É–±–ª–∏–∫–∞—Ç model_name - {air.get('model_name', 'N/A')}")
            
            if should_remove:
                removed_count += 1
                continue
            
            # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º: —É–±–∏—Ä–∞–µ–º –ø–æ–ª–µ "class"
            if "class" in air:
                del air["class"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º model_name
            filtered_airs.append(air)
            seen_model_names.add(air.get("model_name"))
        
        # –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º ID –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤
        print(f"üîÑ –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞—é ID –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤...")
        for i, air in enumerate(filtered_airs, 1):
            air["id"] = i
        
        print(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {len(filtered_airs)} –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤")
        print(f"üö´ –£–¥–∞–ª–µ–Ω–æ: {removed_count} –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ {output_file}...")
        result_data = {"air_conditioners": filtered_airs}
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(result_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –§–∞–π–ª {output_file} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ —Ñ–∞–π–ª–µ {input_file}: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    current_dir = Path(__file__).parent
    input_file = current_dir / "airs.json"
    output_file = current_dir / "new_airs.json"
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ airs.json...")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
    print(f"üì• –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}")
    print(f"üì§ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
    print("-" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
    success = transform_airs_data(str(input_file), str(output_file))
    
    if success:
        print("-" * 50)
        print("üéâ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("-" * 50)
        print("üí• –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")

if __name__ == "__main__":
    main()
