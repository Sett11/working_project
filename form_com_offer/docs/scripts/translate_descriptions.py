#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏–π –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—è "description" –≤ —Ñ–∞–π–ª–µ new_airs.json
"""

import json
import os
from typing import Dict, Any, List

def translate_description(english_text: str) -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    
    Args:
        english_text: –¢–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
        
    Returns:
        –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    """
    
    # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    translations = {
        "TCL split-system with modern design and energy saving functions": 
            "–°–ø–ª–∏—Ç-—Å–∏—Å—Ç–µ–º–∞ TCL —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è",
        
        "Mitsubishi Heavy Industries conditioner with extended warranty": 
            "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä Mitsubishi Heavy Industries —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–µ–π",
        
        "Mitsubishi Heavy Industries semi-commercial conditioner with 3-year warranty": 
            "–ü–æ–ª—É–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä Mitsubishi Heavy Industries —Å 3-–ª–µ—Ç–Ω–µ–π –≥–∞—Ä–∞–Ω—Ç–∏–µ–π"
    }
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if english_text in translations:
        return translations[english_text]
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    # (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –≤—Å–µ–≥–æ 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏—è)
    return english_text

def process_new_airs_file():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª new_airs.json, –ø–µ—Ä–µ–≤–æ–¥—è –≤—Å–µ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    """
    
    input_file = "new_airs.json"
    output_file = "new_airs_translated.json"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists(input_file):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        print(f"üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª {input_file}...")
        with open(input_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if "air_conditioners" not in data:
            print(f"‚ùå –û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ {input_file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'air_conditioners'!")
            return False
        
        air_conditioners = data["air_conditioners"]
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤: {len(air_conditioners)}")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏—è–º
        unique_descriptions = {}
        for ac in air_conditioners:
            desc = ac.get("description", "")
            unique_descriptions[desc] = unique_descriptions.get(desc, 0) + 1
        
        print(f"üìù –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π: {len(unique_descriptions)}")
        for desc, count in unique_descriptions.items():
            print(f"   - '{desc}': {count} —Ä–∞–∑")
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏—è
        print("\nüîÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫...")
        translated_count = 0
        
        for i, ac in enumerate(air_conditioners):
            if i % 50 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –∑–∞–ø–∏—Å–µ–π
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i}/{len(air_conditioners)}")
            
            if "description" in ac:
                original_desc = ac["description"]
                translated_desc = translate_description(original_desc)
                
                if translated_desc != original_desc:
                    ac["description"] = translated_desc
                    translated_count += 1
        
        print(f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–π: {translated_count}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"üíæ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ {output_file}...")
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {output_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤:")
        for i, ac in enumerate(air_conditioners[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"   {i+1}. ID {ac['id']}: {ac['description']}")
        
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
    print("=" * 60)
    
    success = process_new_airs_file()
    
    if success:
        print("\nüéâ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: new_airs_translated.json")
    else:
        print("\nüí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞!")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
