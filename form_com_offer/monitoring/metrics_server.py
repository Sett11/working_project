"""
HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫ Prometheus
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç /metrics
"""
import asyncio
import aiohttp
from aiohttp import web
import time
from monitoring.metrics_exporter import exporter
from monitoring.mylogger import Logger

logger = Logger(name="metrics_server", log_file="metrics_server.log")

class MetricsServer:
    """HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫ Prometheus
    
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ localhost (127.0.0.1).
    –î–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å host –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    """
    
    def __init__(self, host: str = "127.0.0.1", port: int = 9091):
        self.host = host
        self.port = port
        self.app = web.Application()
        self.setup_routes()
        
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        self.app.router.add_get('/', self.health_check)
        self.app.router.add_get('/metrics', self.metrics_endpoint)
        self.app.router.add_get('/health', self.health_check)
        
    async def health_check(self, request):
        """–≠–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
        return web.json_response({
            "status": "healthy",
            "service": "metrics_exporter",
            "timestamp": time.time()
        })
    
    async def metrics_endpoint(self, request):
        """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus"""
        try:
            start_time = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = await exporter.get_metrics()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            duration = time.time() - start_time
            logger.debug(f"–ú–µ—Ç—Ä–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ {duration:.3f} —Å–µ–∫")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus
            return web.Response(
                text=metrics,
                content_type='text/plain; version=0.0.4; charset=utf-8'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫: {e}")
            return web.Response(
                text="# ERROR: Failed to export metrics\n",
                status=500,
                content_type='text/plain; version=0.0.4; charset=utf-8'
            )
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            runner = web.AppRunner(self.app)
            await runner.setup()
            
            site = web.TCPSite(runner, self.host, self.port)
            await site.start()
            
            logger.info(f"üöÄ –°–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{self.host}:{self.port}")
            logger.info(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É: http://{self.host}:{self.port}/metrics")
            
            return runner
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
            raise
    
    async def stop(self, runner):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            await runner.cleanup()
            logger.info("üõë –°–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async def run_metrics_server(host: str = "127.0.0.1", port: int = 9091):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫
    
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ localhost (127.0.0.1).
    –î–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å host –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    """
    server = MetricsServer(host, port)
    runner = await server.start()
    
    try:
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await server.stop(runner)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫
    asyncio.run(run_metrics_server())
