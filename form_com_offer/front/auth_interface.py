"""
–ú–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.

–°–æ–¥–µ—Ä–∂–∏—Ç:
- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å backend API
"""
import gradio as gr
import httpx
import json
from typing import Optional, Tuple
from utils.mylogger import Logger

logger = Logger(name=__name__, log_file="frontend.log")

# URL –¥–ª—è backend API
BACKEND_URL = "http://backend:8001"

class AuthManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    
    def __init__(self):
        self.token: Optional[str] = None
        self.username: Optional[str] = None
        self.user_id: Optional[int] = None
    
    def set_auth_data(self, token: str, username: str, user_id: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
        self.token = token
        self.username = username
        self.user_id = user_id
        logger.set_user_context(user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {username}")
    
    def clear_auth_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
        self.token = None
        self.username = None
        self.user_id = None
        logger.clear_user_context()
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    
    def is_authenticated(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
        return self.token is not None
    
    def get_auth_headers(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
        if self.token:
            return {"Authorization": f"Bearer {self.token}"}
        return {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
auth_manager = AuthManager()


def register_user(username: str, password: str, secret_key: str) -> Tuple[str, bool]:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        username: –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password: –ü–∞—Ä–æ–ª—å
        secret_key: –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        
    Returns:
        Tuple[str, bool]: (—Å–æ–æ–±—â–µ–Ω–∏–µ, —É—Å–ø–µ—Ö)
    """
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not username or not password or not secret_key:
            return "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        with httpx.Client() as client:
            response = client.post(
                f"{BACKEND_URL}/api/auth/register",
                json={
                    "username": username,
                    "password": password,
                    "secret_key": secret_key
                },
                timeout=10.0
            )
        
        if response.status_code == 200:
            data = response.json()
            auth_manager.set_auth_data(
                token=data["token"],
                username=data["user"]["username"],
                user_id=data["user"]["id"]
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {username}")
            return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É!\n\n–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.", True
        else:
            error_data = response.json()
            error_msg = error_data.get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error_msg}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error_msg}", False
            
    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É", False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", False


def login_user(username: str, password: str) -> Tuple[str, bool]:
    """
    –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É.
    
    Args:
        username: –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password: –ü–∞—Ä–æ–ª—å
        
    Returns:
        Tuple[str, bool]: (—Å–æ–æ–±—â–µ–Ω–∏–µ, —É—Å–ø–µ—Ö)
    """
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not username or not password:
            return "‚ùå –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã", False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥
        with httpx.Client() as client:
            response = client.post(
                f"{BACKEND_URL}/api/auth/login",
                json={
                    "username": username,
                    "password": password
                },
                timeout=10.0
            )
        
        if response.status_code == 200:
            data = response.json()
            auth_manager.set_auth_data(
                token=data["token"],
                username=data["user"]["username"],
                user_id=data["user"]["id"]
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª: {username}")
            return f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n\n–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.", True
        else:
            error_data = response.json()
            error_msg = error_data.get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            logger.warning(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {error_msg}")
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {error_msg}", False
            
    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É", False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
        return f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", False


def logout_user() -> Tuple[str, bool]:
    """
    –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
    
    Returns:
        Tuple[str, bool]: (—Å–æ–æ–±—â–µ–Ω–∏–µ, —É—Å–ø–µ—Ö)
    """
    auth_manager.clear_auth_data()
    return "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", True


def create_auth_interface() -> gr.Blocks:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    
    Returns:
        gr.Blocks: Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    
    def clear_fields():
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
        return "", "", "", "", ""  # login_username, login_password, reg_username, reg_password, reg_secret_key
    
    with gr.Blocks(title="–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è") as auth_interface:
        gr.Markdown("# üîê –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        auth_result = gr.Textbox(
            label="–†–µ–∑—É–ª—å—Ç–∞—Ç",
            interactive=False,
            visible=True,
            lines=2
        )
        
        with gr.Row():
            with gr.Column(scale=1):
                gr.Markdown("### –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
                
                login_username = gr.Textbox(
                    label="–õ–æ–≥–∏–Ω",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω",
                    show_label=True
                )
                
                login_password = gr.Textbox(
                    label="–ü–∞—Ä–æ–ª—å",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
                    type="password",
                    show_label=True
                )
                
                login_btn = gr.Button("–í–æ–π—Ç–∏", variant="primary")
            
            with gr.Column(scale=1):
                gr.Markdown("### –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
                
                reg_username = gr.Textbox(
                    label="–õ–æ–≥–∏–Ω",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω",
                    show_label=True
                )
                
                reg_password = gr.Textbox(
                    label="–ü–∞—Ä–æ–ª—å",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
                    type="password",
                    show_label=True
                )
                
                reg_secret_key = gr.Textbox(
                    label="–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á",
                    type="password",
                    show_label=True
                )
                
                reg_btn = gr.Button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", variant="secondary")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        login_btn.click(
            fn=login_user,
            inputs=[login_username, login_password],
            outputs=[auth_result],
            show_progress=True
        ).then(
            fn=clear_fields,
            outputs=[login_username, login_password, reg_username, reg_password, reg_secret_key]
        )
        
        reg_btn.click(
            fn=register_user,
            inputs=[reg_username, reg_password, reg_secret_key],
            outputs=[auth_result],
            show_progress=True
        ).then(
            fn=clear_fields,
            outputs=[login_username, login_password, reg_username, reg_password, reg_secret_key]
        )
    
    return auth_interface


def get_auth_status() -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    
    Returns:
        str: –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    if auth_manager.is_authenticated():
        return f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {auth_manager.username}"
    return "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"


def get_auth_manager() -> AuthManager:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    
    Returns:
        AuthManager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    return auth_manager
