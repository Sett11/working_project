#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import sys
import os
import subprocess
import argparse
from pathlib import Path

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")
    print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: {command}")
    print(f"{'='*60}")
    
    try:
        result = subprocess.run(
            command,
            shell=True,
            check=True,
            capture_output=False,
            text=True
        )
        print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –û–®–ò–ë–ö–ê")
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        "pytest",
        "pytest-asyncio",
        "httpx",
        "fastapi",
        "sqlalchemy",
        "asyncpg",
        "reportlab",
        "gradio"
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace("-", "_"))
            print(f"  ‚úÖ {package}")
        except ImportError:
            print(f"  ‚ùå {package} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def run_unit_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    return run_command(
        "python -m pytest tests/ -v -m 'not integration and not slow'",
        "–ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    )

def run_integration_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    return run_command(
        "python -m pytest tests/ -v -m integration",
        "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    )

def run_database_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return run_command(
        "python -m pytest tests/test_database.py -v",
        "–¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    )

def run_api_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã API"""
    return run_command(
        "python -m pytest tests/test_api.py -v",
        "–¢–µ—Å—Ç—ã API"
    )

def run_frontend_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    return run_command(
        "python -m pytest tests/test_frontend.py -v",
        "–¢–µ—Å—Ç—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"
    )

def run_pdf_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    return run_command(
        "python -m pytest tests/test_pdf_generation.py -v",
        "–¢–µ—Å—Ç—ã PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
    )

def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    return run_command(
        "python -m pytest tests/ -v",
        "–í—Å–µ —Ç–µ—Å—Ç—ã"
    )

def run_tests_with_coverage():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞"""
    return run_command(
        "python -m pytest tests/ -v --cov=. --cov-report=html --cov-report=term",
        "–¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞"
    )

def run_specific_test(test_path):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç"""
    return run_command(
        f"python -m pytest {test_path} -v",
        f"–¢–µ—Å—Ç: {test_path}"
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    parser.add_argument(
        "--type",
        choices=["unit", "integration", "database", "api", "frontend", "pdf", "all", "coverage"],
        default="all",
        help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞"
    )
    parser.add_argument(
        "--test",
        help="–ü—É—Ç—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–µ—Å—Ç—É"
    )
    parser.add_argument(
        "--check-deps",
        action="store_true",
        help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    )
    parser.add_argument(
        "--verbose",
        "-v",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    
    args = parser.parse_args()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    project_dir = Path(__file__).parent
    os.chdir(project_dir)
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if args.check_deps:
        if not check_dependencies():
            sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    success = True
    
    if args.test:
        success = run_specific_test(args.test)
    elif args.type == "unit":
        success = run_unit_tests()
    elif args.type == "integration":
        success = run_integration_tests()
    elif args.type == "database":
        success = run_database_tests()
    elif args.type == "api":
        success = run_api_tests()
    elif args.type == "frontend":
        success = run_frontend_tests()
    elif args.type == "pdf":
        success = run_pdf_tests()
    elif args.type == "coverage":
        success = run_tests_with_coverage()
    else:  # all
        success = run_all_tests()
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n{'='*60}")
    if success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("üí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫")
    print(f"{'='*60}")
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
