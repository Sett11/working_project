import os
import asyncio
import re
import signal
import csv
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from utils.mylogger import Logger
from utils.llm import OpenAIClient
from db.database import Database
import requests

load_dotenv()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
MAX_REQUESTS_PER_DAY = os.getenv("MAX_REQUESTS_PER_DAY", "15")
MAX_REQUESTS_PER_USER = os.getenv("MAX_REQUESTS_PER_USER", "51")
MESSAGE_CHUNK_SIZE = int(os.getenv("MESSAGE_CHUNK_SIZE", "4096"))
GPT_MODEL = os.getenv("GPT_MODEL", "google/gemma-3-27b-it")
BASE_URL = os.getenv("BASE_URL", "https://openrouter.ai/api/v1")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = Logger("bot", "bot_events.log")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_TOKEN:
    logger.critical("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ .env")

if not OPENAI_API_KEY:
    logger.critical("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    raise ValueError("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ .env")

if not GPT_MODEL or not BASE_URL:
    logger.critical("–ù–µ —É–∫–∞–∑–∞–Ω—ã GPT_MODEL –∏–ª–∏ BASE_URL –≤ .env —Ñ–∞–π–ª–µ")
    raise ValueError("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã GPT_MODEL –∏–ª–∏ BASE_URL –≤ .env —Ñ–∞–π–ª–µ")

if not MAX_REQUESTS_PER_DAY or not MAX_REQUESTS_PER_USER:
    logger.critical("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ .env —Ñ–∞–π–ª–µ")
    raise ValueError("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ .env —Ñ–∞–π–ª–µ")

class BotHandler:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–∞"""
    def __init__(self):
        self.prompts = {}
        self.user_sessions = {}
        self.db = Database()
        self.llm_client = OpenAIClient(
            model_name=GPT_MODEL,
            api_key=OPENAI_API_KEY,
            base_url=BASE_URL
        )
        self._load_prompts()
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _load_prompts(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        prompt_files = {
            2: "steps/step_2_purchcenter.txt",
            3: "steps/step_3_avatar.txt",
            4: "steps/step_4_model.txt",
            5: "steps/step_5_svyazki.txt",
            6: "steps/step_6_tap.txt"
        }

        for step, filename in prompt_files.items():
            try:
                with open(filename, "r", encoding="utf-8") as f:
                    self.prompts[step] = f.read()
                    logger.info(f"–ü—Ä–æ–º—Ç –¥–ª—è —à–∞–≥–∞ {step} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {filename}")
            except FileNotFoundError:
                logger.critical(f"–§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                raise
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–ø—Ç–∞ {filename}: {str(e)}")
                raise

    async def handle_feedback_steps(self, update: Update, session: dict, chat_id: int):
        user_input = update.message.text.strip()
        step = session["step"]
        data = session["data"]

        if step == "rate_score":
            if not user_input.isdigit() or not (0 <= int(user_input) <= 10):
                await update.message.reply_text("<b>‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.</b>", parse_mode="HTML")
                return
            data["user_rating"] = int(user_input)
            session["step"] = "rate_comment"
            await update.message.reply_text("<b>üí¨ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º ‚Äî –ü–æ—á–µ–º—É –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–∞–∫—É—é –æ—Ü–µ–Ω–∫—É?</b>", parse_mode="HTML")
            return

        if step == "rate_comment":
            data["user_comment"] = user_input
            await update.message.reply_text("<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –§–∞–π–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è! üëá</b>", parse_mode="HTML")

    
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞

            user_data_dir = Path("user_data")
            user_data_dir.mkdir(parents=True, exist_ok=True)

            safe_company_name = re.sub(r'[\\/*?:"<>|]', '_', data.get('partner_company_name', 'partner'))
            date_str = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"SFS_Pitch_{safe_company_name}_{date_str}.txt"
            filepath = Path("user_data") / filename

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å
            session["result_file_path"] = str(filepath)

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
            content = self._prepare_session_file_content(data, session)

            try:
                with open(filepath, "w", encoding="utf-8") as f:
                    f.write(content)
            except IOError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {filepath}: {str(e)}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª.")
                return

            
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–º–µ–Ω–Ω–æ —Ç–æ–≥–æ —Ñ–∞–π–ª–∞, —á—Ç–æ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω
            saved_path = Path(session.get("result_file_path", ""))   
            if filepath and Path(filepath).exists():
                with open(filepath, "rb") as file:
                    await update.message.reply_document(document=file)
                logger.info(f"–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {saved_path}")
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

        #    await self.finalize_session(update, session, chat_id)    

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –±–∞–∑—É
            await self.db.save_session_data(
                user_id=chat_id,
                step="feedback",
                data=data,
                tokens_used=session.get("total_tokens", 0),
                total_cost=session.get("total_tokens", 0) * 0.000002
            )

            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ CSV-—Ñ–∞–π–ª


            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ output, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            output_dir = Path("output")
            output_dir.mkdir(parents=True, exist_ok=True)

            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            feedback_path = output_dir / "feedback.csv"
            file_exists = feedback_path.exists()

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            feedback_row = [
                now_str,
                update.effective_user.full_name,
                f"@{update.effective_user.username}" if update.effective_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω",
                chat_id,
                data.get("partner_company_name", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"),
                data.get("your_company_name", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"),
                data.get("user_name", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"),
                data.get("user_rating"),
                data.get("user_comment", "").replace("\n", " "),
                session.get("total_input_tokens", 0),
                session.get("total_output_tokens", 0)
            ]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
            with open(feedback_path, mode="a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                if not file_exists:
                    writer.writerow([
                        "–î–∞—Ç–∞",
                        "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        "Username",
                        "Telegram ID",
                        "–ö–æ–º–ø–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä",
                        "–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è",
                        "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –∫–∞–∫",
                        "–û—Ü–µ–Ω–∫–∞",
                        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                        "–í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã",
                        "–ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã"
                    ])
                writer.writerow(feedback_row)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google –¢–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å)
            feedback_payload = {
                "date": now_str,
                "full_name": update.effective_user.full_name,
                "username": f"@{update.effective_user.username}" if update.effective_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω",
                "chat_id": chat_id,
                "partner_company": data.get("partner_company_name", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"),
                "your_company": data.get("your_company_name", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"),
                "user_name": data.get("user_name", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"),
                "rating": data.get("user_rating"),
                "comment": data.get("user_comment", "").replace("\n", " "),
                "input_tokens": session.get("total_input_tokens", 0),
                "output_tokens": session.get("total_output_tokens", 0)
            }

            # ‚ö†Ô∏è –ü–æ–¥—Å—Ç–∞–≤—å —Å—é–¥–∞ URL —Å–≤–æ–µ–≥–æ Google Apps Script:
            response = requests.post("https://script.google.com/macros/s/AKfycbwVbeNBLYYDkcY9rB4k2-1Z3beu335A0-KPDt_C_KkO_3GCu8uJS2qx7PjZgmQUdsyt/exec", json=feedback_payload)

            if response.status_code == 200:
                logger.info("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Google –¢–∞–±–ª–∏—Ü—É")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É: {response.status_code}, {response.text}")
            await self.finalize_session(update, session, chat_id)

    async def send_long_message(self, text: str, update: Update):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏"""
        try:
            if not text:
                logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return

            for i in range(0, len(text), MESSAGE_CHUNK_SIZE):
                chunk = text[i:i+MESSAGE_CHUNK_SIZE]
                await update.message.reply_text(chunk)
                await asyncio.sleep(0.3)

            logger.debug(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—á–∞—Å—Ç–µ–π: {len(text) // MESSAGE_CHUNK_SIZE + 1})")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def ask_gpt(self, system_prompt: str, user_prompt: str, request_type: str, user_id: int):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ OpenAI —á–µ—Ä–µ–∑ OpenAIClient"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            daily_ok, total_ok = await self.db.check_rate_limit(user_id)
            if not daily_ok:
                return (
                    f"‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –í–∞—à –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç {MAX_REQUESTS_PER_DAY} –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤—Ç—Ä–∞!\n"
                    f"–ï—Å–ª–∏ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –æ–±—Å—É–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º:\n"
                    f"https://t.me/SkillsForSales",
                    0, 0, 0
                )
            if not total_ok:
                return (
                    f"‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –í–∞—à –ª–∏–º–∏—Ç –≤ {MAX_REQUESTS_PER_USER} –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                    f"–ï—Å–ª–∏ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –æ–±—Å—É–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º:\n"
                    f"https://t.me/SkillsForSales",
                    0, 0, 0
                )

            start_time = datetime.now()

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ]

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ OpenAIClient
            content, input_tokens, output_tokens = await self.llm_client.generate(
                messages=messages,
                temperature=0.7,
                max_tokens=2048
            )

            processing_time = (datetime.now() - start_time).total_seconds()

            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ‚ö†Ô∏è)
            if content.startswith("‚ö†Ô∏è"):
                logger.warning(f"LLM –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {content}")
                return content, 0, 0, 0

            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            cost = input_tokens * 0.0000004 + output_tokens * 0.0000016

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            await self.db.log_request(user_id, request_type, input_tokens + output_tokens, cost)

            logger.info(
                f"GPT –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. User: {user_id}, Type: {request_type}, "
                f"Tokens: {input_tokens} in, {output_tokens} out, "
                f"Cost: ${cost:.6f}, Time: {processing_time:.2f} —Å–µ–∫."
            )

            return content, input_tokens, output_tokens, cost

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {str(e)}"
            logger.error(error_msg)
            return "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 0, 0, 0

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            chat_id = update.effective_chat.id
            user = update.effective_user

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
            daily_ok, total_ok = await self.db.check_rate_limit(chat_id)

            if not total_ok:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –í–∞—à –ª–∏–º–∏—Ç –≤ {MAX_REQUESTS_PER_USER} –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                    f"–ï—Å–ª–∏ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –æ–±—Å—É–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º:\n"
                    f"https://t.me/SkillsForSales"
                )
                return

            if not daily_ok:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –í–∞—à –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç {MAX_REQUESTS_PER_DAY} –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤—Ç—Ä–∞!\n"
                    f"–ï—Å–ª–∏ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –æ–±—Å—É–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º:\n"
                    f"https://t.me/SkillsForSales"
                )
                return

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.db.register_user(
                user_id=chat_id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name or ""
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
            self.user_sessions[chat_id] = {
                "step": -1,
                "data": {},
                "total_tokens": 0,
                "total_input_tokens": 0,
                "total_output_tokens": 0,
                "start_time": datetime.now().isoformat()
            }

            logger.info(f"–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø <b>–ê–ª–µ–∫—Å</b> ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç <b>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ –ø—Ä–æ–¥–∞–∂</b>.\n\n"
                "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –ø–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –í2–í –ø—Ä–æ–¥–∞–∂, <b>–ê–ª–µ–∫—Å–µ–π –Æ—Å–æ–≤</b>.\n\n", parse_mode="HTML")
            await asyncio.sleep(2)  # ‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
            await update.message.reply_text("–ù–∞—Å –∂–¥—ë—Ç <b>6 —à–∞–≥–æ–≤</b> ‚Äî –æ—Ç —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ —Ç–æ—á–Ω–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏:\n\n", parse_mode="HTML")
            await asyncio.sleep(1)  # ‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫
            await update.message.reply_text("1Ô∏è‚É£ —Å–æ–±–µ—Ä—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω—ë—Ä–µ")
            await asyncio.sleep(1)  # ‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫
            await update.message.reply_text(    "2Ô∏è‚É£ –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ä–æ–ª–∏ –≤ –∑–∞–∫—É–ø–æ—á–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ")
            await asyncio.sleep(1)  # ‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫
            await update.message.reply_text(     "3Ô∏è‚É£ –æ–ø–∏—à–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–ª—é—á–µ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
            await asyncio.sleep(1)  # ‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫
            await update.message.reply_text(    "4Ô∏è‚É£ —Ä–∞–∑–ª–æ–∂–∏–º —Ç–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç –ø–æ —É—Ä–æ–≤–Ω—è–º –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏")
            await asyncio.sleep(1)  # ‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫
            await update.message.reply_text(    "5Ô∏è‚É£ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–Ω–Ω–æ—Å—Ç–Ω—ã–µ —Å–≤—è–∑–∫–∏")
            await asyncio.sleep(1)  # ‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫
            await update.message.reply_text(    "6Ô∏è‚É£ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—É—é –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é..\n\n")
            await asyncio.sleep(2)  # ‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã

            await update.message.reply_text("<b>–ï—Å–ª–∏ –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –ò–º—è?</b>", parse_mode="HTML")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {str(e)}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset"""
        try:
            chat_id = update.effective_chat.id

            if chat_id in self.user_sessions:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
                session = self.user_sessions[chat_id]
                await self.db.save_session_data(
                    user_id=chat_id,
                    step=session["step"],
                    data=session["data"],
                    tokens_used=session.get("total_tokens", 0),
                    total_cost=session.get("total_tokens", 0) * 0.000002
                )

                del self.user_sessions[chat_id]
                logger.info(f"–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —Å–±—Ä–æ—à–µ–Ω–∞")

            await update.message.reply_text("üîÑ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ reset: {str(e)}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_initial_steps(self, update: Update, session: dict, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤ –¥–∏–∞–ª–æ–≥–∞ (—à–∞–≥–∏ -1 –¥–æ 3)"""
        user_input = update.message.text.strip()
        data = session["data"]
        step = session["step"]

        try:
            if step == -1:
                data["user_name"] = user_input
                await update.message.reply_text(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, <b>{user_input}</b>!\n\n"
                                                f"<b>üëâ –®–∞–≥ 1 –∏–∑ 6.</b> –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å, —Å –∫–µ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å: –Ω–µ–º–Ω–æ–≥–æ —É–∑–Ω–∞–µ–º –æ –ø–∞—Ä—Ç–Ω—ë—Ä–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏–º, –∫—Ç–æ –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏—è. <b>–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ 4 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞.</b>", parse_mode="HTML")
                await asyncio.sleep(2)  # ‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
                await update.message.reply_text("<b>1. üß∞ –° –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—Å—Ç—Ä–µ—á—É?</b> (—É–∫–∞–∂–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä –û–û–û –õ–ú–°-–°–æ–ª—é—à–Ω)", parse_mode="HTML")
                session["step"] = 0
                return

            if step == 0:
                data["partner_company_name"] = user_input
                await update.message.reply_text(
                    "<b>2. üîó –£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∞–π—Ç —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: www.lms-solution.ru)",
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
                session["step"] = 1
                return

            if step == 1:
                if not re.match(r'^https?://', user_input):
                    user_input = f'http://{user_input}'
                data["client_company_site"] = user_input
                await update.message.reply_text("<b>3. üìÑ –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.</b>(–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –æ–±—É—á–∞—é—â–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º)", parse_mode="HTML")
                session["step"] = 2
                return

            if step == 2:
                data["client_company_profile"] = user_input
                await update.message.reply_text("<b>4. üß© –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏?</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–±—É—á–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π)", parse_mode="HTML")
                session["step"] = 3
                return

            if step == 3:
                data["product_offer"] = user_input
                await update.message.reply_text(
                    "<b>–°–ø–∞—Å–∏–±–æ!</b>\n\nüëâ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ <b>—à–∞–≥—É 2</b> –∏–∑ 6. \n\n"
                    "üßë‚Äçüßë‚Äçüßí‚Äçüßí –°–µ–π—á–∞—Å –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, <b>–∫—Ç–æ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø–∞—Ä—Ç–Ω—ë—Ä–∞.</b>\n"
                    "‚åõ –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥", parse_mode="HTML"
                )

                await asyncio.sleep(2)  # ‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
                await update.message.reply_text("<b>‚åõ–°–æ–±–∏—Ä–∞—é –∫–∞—Ä—Ç–∏–Ω—É –∑–∞–∫—É–ø–æ—á–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞...</b>", parse_mode="HTML"
                )

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
                prompt_filled = self.prompts[2] \
                    .replace("[–ù–ê–ó–í–ê–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–ò –ö–õ–ò–ï–ù–¢–ê]", data["partner_company_name"]) \
                    .replace("[–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –î–ï–Ø–¢–ï–õ–¨–ù–û–°–¢–ò]", data["client_company_profile"]) \
                    .replace("[–°–ê–ô–¢ –ö–û–ú–ü–ê–ù–ò–ò]", data["client_company_site"]) \
                    .replace("[–ß–¢–û (–í–´) –í–ê–®–ê –ö–û–ú–ü–ê–ù–ò–Ø –ü–†–ï–î–õ–ê–ì–ê–ï–¢ –î–ê–ù–ù–û–ô –ö–û–ú–ü–ê–ù–ò–ò]", data["product_offer"])

                # –ó–∞–ø—Ä–æ—Å –∫ GPT
                purch_result, input_tokens, output_tokens, cost = await self.ask_gpt(
                    system_prompt=self.prompts[2],
                    user_prompt=prompt_filled,
                    request_type="purchcenter_analysis",
                    user_id=chat_id
                )

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
                session["total_tokens"] += input_tokens + output_tokens
                session["total_input_tokens"] += input_tokens
                session["total_output_tokens"] += output_tokens

                data["purchcenter_result"] = purch_result
                await self.send_long_message(purch_result, update)

                await update.message.reply_text(
                    "<b>üëâ –®–∞–≥ 3 </b>–∏–∑ 6.üí°–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–º—Å—è –Ω–∞ –∫–ª—é—á–µ–≤–æ–π —Ä–æ–ª–∏.\n", parse_mode="HTML")
                await asyncio.sleep(1)  # ‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞
                await update.message.reply_text("<b>–ù–∞–ø–∏—à–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —Å –∫–µ–º —Ç—ã, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –±—É–¥–µ—à—å –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥.. </b> "
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä –∏–ª–∏ HR-–¥–∏—Ä–µ–∫—Ç–æ—Ä.", parse_mode="HTML"
                )
                session["step"] = 4

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_initial_steps (—à–∞–≥ {step}): {str(e)}")
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
            raise

    async def handle_avatar_step(self, update: Update, session: dict, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ (—à–∞–≥ 4)"""
        try:
            user_input = update.message.text.strip()
            data = session["data"]

            await update.message.reply_text("<b>–°–ø–∞—Å–∏–±–æ!</b>\n"
                                            " –§–æ—Ä–º—É–ª–∏—Ä—É—é –≥–∏–ø–æ—Ç–µ–∑—É ‚Äî <b>–∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤–∞–∂–Ω—ã –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –ø—Ä–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ –í–∞—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.</b> \n\n"
                                            "‚åõ –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 40 —Å–µ–∫—É–Ω–¥....", parse_mode="HTML")

            prompt_filled = self.prompts[3].replace("[–£–ö–ê–ó–ê–¢–¨ –î–û–õ–ñ–ù–û–°–¢–¨ / –ü–û–ó–ò–¶–ò–Æ]", user_input)
            data["chosen_position"] = user_input

            # –ó–∞–ø—Ä–æ—Å –∫ GPT
            avatar_result, input_tokens, output_tokens, cost = await self.ask_gpt(
                system_prompt=self.prompts[3],
                user_prompt=prompt_filled,
                request_type="avatar_creation",
                user_id=chat_id
            )

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
            session["total_tokens"] += input_tokens + output_tokens
            session["total_input_tokens"] += input_tokens
            session["total_output_tokens"] += output_tokens

            data["avatar_result"] = avatar_result
            await self.send_long_message(avatar_result, update)

            await update.message.reply_text(
                "\n\n<b>üëâ –®–∞–≥ 4 </b>–∏–∑ 6. üì¶ –ß—Ç–æ–±—ã –ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ–Ω—è–ª, <b>–∫–∞–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ—Å—ë—Ç —Ç–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —É—Å–ª—É–≥–∞</b>,\n"
                " –Ω—É–∂–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω—ã–π –æ–±—Ä–∞–∑. "
                "–î–ª—è —ç—Ç–æ–≥–æ —è –∑–∞–¥–∞–º —Ç–µ–±–µ 4 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –ø–æ –æ–¥–Ω–æ–º—É.\n\n"
                " <b>–ü–æ–µ—Ö–∞–ª–∏! üöÄ</b> \n\n", parse_mode="HTML"
            )
            await asyncio.sleep(2)  # ‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã

            await update.message.reply_text(
                "<b>1. üìÑ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: Skills For Sales)",
                parse_mode="HTML"
            )
            session["step"] = 5

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_avatar_step: {str(e)}")
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: {str(e)}")
            raise

    async def handle_company_info_steps(self, update: Update, session: dict, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ (—à–∞–≥–∏ 5-8)"""
        user_input = update.message.text.strip()
        data = session["data"]
        step = session["step"]

        try:
            if step == 5:
                data["your_company_name"] = user_input
                await update.message.reply_text("<b>2. üåê –£–∫–∞–∂–∏—Ç–µ —Å–∞–π—Ç –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://skillsforsales.ru)", parse_mode="HTML",
                                                disable_web_page_preview=True)
                session["step"] = 6
                return

            if step == 6:
                if not re.match(r'^https?://', user_input):
                    user_input = f'http://{user_input}'
                data["your_company_website"] = user_input
                await update.message.reply_text("<b>3. üì¶ –ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —É—Å–ª—É–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—à–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É?</b>", parse_mode="HTML")
                session["step"] = 7
                return

            if step == 7:
                data["your_product_name"] = user_input
                await update.message.reply_text("<b>4. üîó –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —É—Å–ª—É–≥—É –Ω–∞ –≤–∞—à–µ–º —Å–∞–π—Ç–µ.</b>", parse_mode="HTML")
                session["step"] = 8
                return

            if step == 8:
                if not re.match(r'^https?://', user_input):
                    user_input = f'http://{user_input}'
                data["product_link"] = user_input

                await update.message.reply_text("<b>–°–ø–∞—Å–∏–±–æ!</b>\n"
                                                "<b>üöÄ –§–æ—Ä–º–∏—Ä—É—é —Ç—Ä—ë—Ö—É—Ä–æ–≤–Ω–µ–≤—É—é –º–æ–¥–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–∞</b> ‚Äî —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä—É –Ω–µ —Ç–æ–ª—å–∫–æ, —á—Ç–æ —Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å,"
                                                " –Ω–æ –∫–∞–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏.\n\n"
                                                "–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥....", parse_mode="HTML")

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
                prompt_filled = self.prompts[4] \
                    .replace("[–ù–ê–ó–í–ê–ù–ò–ï –í–ê–®–ï–ô –ö–û–ú–ü–ê–ù–ò–ò]", data.get("your_company_name", "")) \
                    .replace("[–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –î–ï–Ø–¢–ï–õ–¨–ù–û–°–¢–ò –í–ê–®–ï–ô –ö–û–ú–ü–ê–ù–ò–ò]", data.get("product_offer", "")) \
                    .replace("[–°–°–´–õ–ö–ê –í–ê–® –°–ê–ô–¢]", data.get("your_company_website", "")) \
                    .replace("[–£–ö–ê–ó–ê–¢–¨ –ü–†–û–î–£–ö–¢ –ò–õ–ò –ö–ê–¢–ï–ì–û–†–ò–Æ –ü–†–û–î–£–ö–¢–ê]", data.get("your_product_name", "")) \
                    .replace("[–°–°–´–õ–ö–ê –ù–ê –û–ü–ò–°–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–ê]", data["product_link"])

                # –ó–∞–ø—Ä–æ—Å –∫ GPT
                product_model, input_tokens, output_tokens, cost = await self.ask_gpt(
                    system_prompt=self.prompts[4],
                    user_prompt=prompt_filled,
                    request_type="product_model",
                    user_id=chat_id
                )

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
                session["total_tokens"] += input_tokens + output_tokens
                session["total_input_tokens"] += input_tokens
                session["total_output_tokens"] += output_tokens

                data["product_model"] = product_model
                await self.send_long_message(product_model, update)

                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω—ã—Ö —Å–≤—è–∑–æ–∫
                await self.generate_value_links(update, session, chat_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_company_info_steps (—à–∞–≥ {step}): {str(e)}")
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
            raise

    async def generate_value_links(self, update: Update, session: dict, chat_id: int):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–Ω–Ω–æ—Å—Ç–Ω—ã—Ö —Å–≤—è–∑–æ–∫"""
        try:
            data = session["data"]
            await update.message.reply_text("<b>üëâ –®–∞–≥ 5</b> –∏–∑ 6. –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —á—Ç–æ–±—ã <b>—Å–≤—è–∑–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞</b>.\n\n", parse_mode="HTML")
            await asyncio.sleep(1)  # ‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞
            await update.message.reply_text ("<b>üîó–§–æ—Ä–º–∏—Ä—É—é —Ü–µ–Ω–Ω–æ—Å—Ç–Ω—ã–µ —Å–≤—è–∑–∫–∏...</b> –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 20 —Å–µ–∫—É–Ω–¥....", parse_mode="HTML")

            prompt_filled = self.prompts[5] \
                .replace("[–ê–í–ê–¢–ê–†]", data["avatar_result"]) \
                .replace("[–ú–û–î–ï–õ–¨ –ü–†–û–î–£–ö–¢–ê]", data["product_model"]) \
                .replace("[–¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ –∞–≤–∞—Ç–∞—Ä–∞]", data["chosen_position"])

            # –ó–∞–ø—Ä–æ—Å –∫ GPT
            value_links, input_tokens, output_tokens, cost = await self.ask_gpt(
                system_prompt=self.prompts[5],
                user_prompt=prompt_filled,
                request_type="value_links",
                user_id=chat_id
            )

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
            session["total_tokens"] += input_tokens + output_tokens
            session["total_input_tokens"] += input_tokens
            session["total_output_tokens"] += output_tokens

            data["value_links"] = value_links
            await self.send_long_message(value_links, update)

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            await self.generate_pitch(update, session, chat_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_value_links: {str(e)}")
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤—è–∑–æ–∫: {str(e)}")
            raise

    async def generate_pitch(self, update: Update, session: dict, chat_id: int):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        try:
            data = session["data"]
            await update.message.reply_text("<b>üëâ –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥</b>\n"
                                            " –¢–µ–ø–µ—Ä—å, –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω—ã—Ö —Å–≤—è–∑–æ–∫, —Å—Ñ–æ—Ä–º–∏—Ä—É—é <b>–∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é ‚Äî —á—ë—Ç–∫—É—é, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.</b>", parse_mode="HTML")
            await asyncio.sleep(1)  # ‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞
            await update.message.reply_text("<b>üó£Ô∏è–°–æ–∑–¥–∞—é –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é...</b>–æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 25 —Å–µ–∫—É–Ω–¥....", parse_mode="HTML")

            prompt_filled = self.prompts[6] \
                .replace("[–°–í–Ø–ó–ö–ò]", data["value_links"]) \
                .replace("[–ê–í–ê–¢–ê–†]", data["avatar_result"]) \
                .replace("[–ú–û–î–ï–õ–¨ –ü–†–û–î–£–ö–¢–ê]", data["product_model"]) \
                .replace("[–î–û–õ–ñ–ù–û–°–¢–¨]", data["chosen_position"])

            # –ó–∞–ø—Ä–æ—Å –∫ GPT
            pitch, input_tokens, output_tokens, cost = await self.ask_gpt(
                system_prompt=self.prompts[6],
                user_prompt=prompt_filled,
                request_type="pitch",
                user_id=chat_id
            )

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
            session["total_tokens"] += input_tokens + output_tokens
            session["total_input_tokens"] += input_tokens
            session["total_output_tokens"] += output_tokens

            data["pitch"] = pitch
            await self.send_long_message(pitch, update)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
#            await self.finalize_session(update, session, chat_id)
            await update.message.reply_text(
                "<b>ü§ù–Ø —Å–æ—Ö—Ä–∞–Ω—è—é –≤—Å–µ –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –µ–¥–∏–Ω—ã–π —Ñ–∞–π–ª –∏ –±—É–¥—É –≥–æ—Ç–æ–≤ –µ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã.</b>\n\n", parse_mode="HTML"
            )

            await asyncio.sleep(2)  # ‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã

            await update.message.reply_text(
                "<b>‚åõÔ∏è–ü–æ–∫–∞ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è, –ø—Ä–æ—Å—å–±–∞ –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10,\n"
                "–≥–¥–µ 0 ‚Äî –∫—Ä–∞–π–Ω–µ –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã, –∞ 10 ‚Äî –∫—Ä–∞–π–Ω–µ –¥–æ–≤–æ–ª—å–Ω—ã.</b>", parse_mode="HTML"
            )
            session["step"] = "rate_score"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_pitch: {str(e)}")
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}")
            raise

    async def finalize_session(self, update: Update, session: dict, chat_id: int):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            data = session["data"]

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –≤ –±–∞–∑—É
            await self.db.save_session_data(
                user_id=chat_id,
                step=session["step"],
                data=data,
                tokens_used=session["total_tokens"],
                total_cost=session["total_tokens"] * 0.000002
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
 #           user_data_dir = Path("user_data")
 #           if not user_data_dir.exists():
 #               user_data_dir.mkdir(parents=True, exist_ok=True)

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
 #           safe_company_name = re.sub(r'[\\/*?:"<>|]', '_', data.get('partner_company_name', 'partner'))
 #           date_str = datetime.now().strftime('%Y%m%d_%H%M%S')
 #           filename = f"SFS_Pitch_{safe_company_name}_{date_str}.txt"
 #           filepath = Path("user_data") / filename

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
 #           session["result_file_path"] = str(filepath)

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
 #           content = self._prepare_session_file_content(data, session)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
 #           try:
 #               with open(filepath, "w", encoding="utf-8") as f:
 #                   f.write(content)
 #           except IOError as e:
 #               logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {filepath}: {str(e)}")
 #               raise

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = await self.db.get_user_stats(chat_id)
            stats_message = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
                f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['daily_requests']}/{MAX_REQUESTS_PER_DAY}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}/{MAX_REQUESTS_PER_USER}\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats['total_tokens']}"
            )
            await update.message.reply_text(stats_message)

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                "<b>‚úÖ –í—Å—ë –≥–æ—Ç–æ–≤–æ! –ú–Ω–µ –±—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ —Å —Ç–æ–±–æ–π –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å!\n"
                "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø–∏—à–∏ /start, –Ω–æ –ø–æ–º–Ω–∏ –ø—Ä–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã\n\n"
                "üìå –ë–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ‚Äî –≤ –Ω–∞—à–µ–º Telegram:\n"
                "https://t.me/SkillsForSalescom</b>", parse_mode="HTML"
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
            file_sent = False
            max_retries = 3
            retry_count = 0

               # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
            del self.user_sessions[chat_id]
            logger.info(f"–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ finalize_session: {str(e)}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º–∏.")
            raise

    def _prepare_session_file_content(self, data: dict, session: dict) -> str:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏"""
        fields_order = [
            ("purchcenter_result", "üìÑ –ì–∏–ø–æ—Ç–µ–∑–∞ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∑–∞–∫—É–ø–æ—á–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞"),
            ("avatar_result", f"üìÑ –ê–≤–∞—Ç–∞—Ä ‚Äî {data.get('chosen_position', '–¥–æ–ª–∂–Ω–æ—Å—Ç—å')}"),
            ("product_model", "üìÑ –¢—Ä—ë—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è –º–æ–¥–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–∞"),
            ("value_links", "üìÑ –¶–µ–Ω–Ω–æ—Å—Ç–Ω—ã–µ —Å–≤—è–∑–∫–∏"),
            ("pitch", "üìÑ –†–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è")
        ]

        content = [
            f"üßë –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data.get('user_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"üóì –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {data.get('partner_company_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}",
            f"üåê –°–∞–π—Ç –∫–ª–∏–µ–Ω—Ç–∞: {data.get('client_company_site', '–Ω–µ —É–∫–∞–∑–∞–Ω')}",
            "\n" + "=" * 60 + "\n"
        ]

        for field, title in fields_order:
            content.extend([
                "=" * 60,
                title,
                "=" * 60,
                data.get(field, "[–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç]"),
                "\n"
            ])

        content.extend([
            "=" * 60,
            f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {session['total_tokens']}",
            f"  ‚îú –í—Ö–æ–¥–Ω—ã–µ: {session.get('total_input_tokens', 0)}",
            f"  ‚îî –í—ã—Ö–æ–¥–Ω—ã–µ: {session.get('total_output_tokens', 0)}",
            "=" * 60,
            "–ö–æ–Ω—Ç–∞–∫—Ç—ã:",
            "WhatsApp: https://wa.me/+79277010202",
            "Telegram: https://t.me/SkillsForSales",
            "–°–∞–π—Ç: https://skillsforsales.ru",
            "=" * 60
        ])

        return "\n".join(content)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            chat_id = update.effective_chat.id
            user = update.effective_user

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
            if chat_id not in self.user_sessions:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–µ—Ä–µ–¥ –ª—é–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            daily_ok, total_ok = await self.db.check_rate_limit(chat_id)

            if not total_ok:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –í–∞—à –ª–∏–º–∏—Ç –≤ {MAX_REQUESTS_PER_USER} –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                    f"–ï—Å–ª–∏ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –æ–±—Å—É–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º:\n"
                    f"https://t.me/SkillsForSales"
                )
                return

            if not daily_ok:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –í–∞—à –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç {MAX_REQUESTS_PER_DAY} –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤—Ç—Ä–∞!\n"
                    f"–ï—Å–ª–∏ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –æ–±—Å—É–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º:\n"
                    f"https://t.me/SkillsForSales"
                )
                return

            session = self.user_sessions[chat_id]
            step = session["step"]

            # üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç—Ç–∞–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            if step in ["rate_score", "rate_comment"]:
                await self.handle_feedback_steps(update, session, chat_id)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —à–∞–≥–∞–º
            if step <= 3:
                await self.handle_initial_steps(update, session, chat_id)
            elif step == 4:
                await self.handle_avatar_step(update, session, chat_id)
            elif 5 <= step <= 8:
                await self.handle_company_info_steps(update, session, chat_id)
            else:
                await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset")
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ {step} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_message: {str(e)}", exc_info=True)
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        if hasattr(self, 'db'):
            await self.db.close()
        self.user_sessions.clear()
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")

if __name__ == "__main__":
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot_handler = BotHandler()

        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        app.add_handler(CommandHandler("start", bot_handler.start))
        app.add_handler(CommandHandler("reset", bot_handler.reset))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot_handler.handle_message))

        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")

        # –ó–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤
        app.run_polling(
            stop_signals=[signal.SIGINT, signal.SIGTERM],
            close_loop=False
        )

    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}", exc_info=True)
        asyncio.run(bot_handler.shutdown())
        raise